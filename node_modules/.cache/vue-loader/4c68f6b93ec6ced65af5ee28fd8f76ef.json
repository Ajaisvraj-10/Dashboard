{"remainingRequest":"E:\\vue_projects\\social media manager\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!E:\\vue_projects\\social media manager\\node_modules\\vuetify-loader\\lib\\loader.js??ref--17-0!E:\\vue_projects\\social media manager\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\vue_projects\\social media manager\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\vue_projects\\social media manager\\src\\containers\\layouts\\compactSidebar\\compactSidebar.vue?vue&type=template&id=e9a0d536&","dependencies":[{"path":"E:\\vue_projects\\social media manager\\src\\containers\\layouts\\compactSidebar\\compactSidebar.vue","mtime":1614340802000},{"path":"E:\\vue_projects\\social media manager\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\vue_projects\\social media manager\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"E:\\vue_projects\\social media manager\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1574476662000},{"path":"E:\\vue_projects\\social media manager\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\vue_projects\\social media manager\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}