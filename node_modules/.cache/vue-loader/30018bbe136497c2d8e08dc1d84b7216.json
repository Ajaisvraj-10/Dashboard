{"remainingRequest":"/Users/muhammed/Documents/vue_projects/biowin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/muhammed/Documents/vue_projects/biowin/src/views/app/oodo/task/tasks.vue?vue&type=template&id=3225cd43&","dependencies":[{"path":"/Users/muhammed/Documents/vue_projects/biowin/src/views/app/oodo/task/tasks.vue","mtime":1676974897833},{"path":"/Users/muhammed/Documents/vue_projects/biowin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/muhammed/Documents/vue_projects/biowin/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/muhammed/Documents/vue_projects/biowin/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Users/muhammed/Documents/vue_projects/biowin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/muhammed/Documents/vue_projects/biowin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}