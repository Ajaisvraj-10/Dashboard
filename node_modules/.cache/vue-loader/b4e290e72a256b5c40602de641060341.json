{"remainingRequest":"/Users/muhammed/Documents/vue_projects/ott-frontent/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/muhammed/Documents/vue_projects/ott-frontent/src/views/app/m1/video.vue?vue&type=template&id=ba98bf9c&scoped=true&","dependencies":[{"path":"/Users/muhammed/Documents/vue_projects/ott-frontent/src/views/app/m1/video.vue","mtime":1687861287549},{"path":"/Users/muhammed/Documents/vue_projects/ott-frontent/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/muhammed/Documents/vue_projects/ott-frontent/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/muhammed/Documents/vue_projects/ott-frontent/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/muhammed/Documents/vue_projects/ott-frontent/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxkaXYgY2xhc3M9Im1haW4tY29udGVudCBtYWluLWNvbnRlbnQtMiIgOmNsYXNzPSIkcm9vdC5tb2RlPT0nbGlnaHQnPydtb2RlX2NoYW5nZSc6JyciPgogIAogICAgICA8ZGl2IGNsYXNzPSJzaXRlLXdyYXBwZXIyIiA6Y2xhc3M9Im1lbnVfY2xpY2s/J25hdi1hY3RpdmUnOicnIj4KCiAgICAgICAgICA8TWFpbkhlYWRlciA6ZWRpdD0iZWRpdCIgOmJsb2Nrcz0iYmxvY2tzIiA6Y3VycmVudF9ibG9jaz0iY3VycmVudF9ibG9jayI+PC9NYWluSGVhZGVyPgogICAgICAgICAgPGRpdiB2LWlmPSJpc19zdGFydCI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IHBvc2l0aW9uLXJlbGF0aXZlIiBzdHlsZT0ibWFyZ2luLXRvcDo4MHB4O21pbi1oZWlnaHQ6IGNhbGMoMTAwdmggLSAzNDBweCk7IiB2LWlmPSJjdXJyZW50X21vdmllLmlkICYmIHN0YXJ0Ij4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTggcGxheS12aWRlby1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IiIgdi1pZj0iY3VycmVudF9tb3ZpZS5tZXNzYWdlPT0ncGxheSciPgogICAgICAgICAgICAgICAgICAgICAgICA8aWZyYW1lIDpzcmM9IidodHRwczovL2lmcmFtZS5tZWRpYWRlbGl2ZXJ5Lm5ldC9lbWJlZC8nK2xpYmFyeV9pZCsnLycrY3VycmVudF9tb3ZpZS52aWRlby52aWRlb19ndWlkKyc/YXV0b3BsYXk9dHJ1ZSciIGxvYWRpbmc9ImxhenkiIHN0eWxlPSJib3JkZXI6IG5vbmU7bWluLWhlaWdodDogMzAwcHg7IHdpZHRoOiAxMDAlOyIgYWxsb3c9ImFjY2VsZXJvbWV0ZXI7IGd5cm9zY29wZTsgYXV0b3BsYXk7IGVuY3J5cHRlZC1tZWRpYTsgcGljdHVyZS1pbi1waWN0dXJlOyIgYWxsb3dmdWxsc2NyZWVuPSJ0cnVlIj48L2lmcmFtZT4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY3Vyc29yLXBvaW50ZXIgcGxheS12aWRlby10aHVtYiIgQGNsaWNrPSJwbGF5TW92aWUoKSIgdi1lbHNlPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgOnNyYz0iYXBpX3VybCtjdXJyZW50X21vdmllLnRodW1ibmFpbCIgIGNsYXNzPSJiYW5uZXItdmlkIHctMTAwIHRodW1iX2ltZyIgPgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iIHB4LTQiPgogICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idmlkZW8tY29udHJvbHMgbWItMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InctMTAwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InctMTAwICIgc3R5bGU9InBvc2l0aW9uOiByZWxhdGl2ZTt6LWluZGV4OiA5OTk7Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWItMiIgc3R5bGU9ImRpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2VlbjthbGlnbi1pdGVtczpzdGFydDtmbGV4LWZsb3c6IHdyYXA7IGdhcDogOHB4OyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDUgY2xhc3M9InRleHQtMjIgIGZvbnQtd2VpZ2h0LTYwMCB0ZXh0LXdoaXRlIG1haW4taGVhZGluZy0xICI+e3tjdXJyZW50X21vdmllLm5hbWV9fTwvaDU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmbGV4LWFsaWduMyAgZzIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJ0bi1vdXRsaW5lLWxpZ2h0IHB4LTIgcHktMSBidG4iIHN0eWxlPSJmb250LXNpemU6IDE0cHg7Zm9udC13ZWlnaHQ6NTAwOyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTaGFyZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJ0bi1wcmltYXJ5IHB4LTIgcHktMSBidG4iIHN0eWxlPSJmb250LXNpemU6IDE0cHg7Zm9udC13ZWlnaHQ6NDAwOyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXYXRjaGxpc3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmF0aW5ncyBmbGV4LWFsaWduMyBtdC0zIG1iLTIiIHN0eWxlPSJmbGV4LWZsb3c6IHdyYXA7Z2FwOiA1cHg7Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJyYXRpbmctY2hpbGQgdGV4dC0xMCBib3JkZXIgZm9udC13ZWlnaHQtNjAwIHJvdW5kZTQgbXItMiIgc3R5bGU9InBhZGRpbmc6MnB4IDNweDsiPklNREI8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDYgY2xhc3M9InJhdGluZy1jaGlsZCBmb250LXdlaWdodC00MDAgdGV4dC0xMyI+e3tjdXJyZW50X21vdmllLm1lc3NhZ2V9fTwvaDY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDYgY2xhc3M9InJhdGluZy1jaGlsZCBmb250LXdlaWdodC00MDAgdGV4dC0xMyI+TW92aWU8L2g2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg2IGNsYXNzPSJyYXRpbmctY2hpbGQgZm9udC13ZWlnaHQtNDAwIHRleHQtMTMiPkVuZ2xpc2g8L2g2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg2IGNsYXNzPSJyYXRpbmctY2hpbGQgZm9udC13ZWlnaHQtNDAwIHRleHQtMTMiPjJociAzMG1pbjwvaDY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDYgY2xhc3M9InJhdGluZy1jaGlsZCBmb250LXdlaWdodC00MDAgdGV4dC0xMyI+MjAyMjwvaDY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3LTEwMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9InRleHQtMTQgbXktMyBmb250LXdlaWdodC00MDAgbWFpbi1oZWFkaW5nLTIiIHN0eWxlPSJsaW5lLWhlaWdodDoyMHB4O2NvbG9yOmxpZ2h0Z3JheTsiPnt7Y3VycmVudF9tb3ZpZS5kZXNjcmlwdGlvbn19PC9oND4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YXJzIG15LTEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZsZXgtYWxpZ24zIG1vdmllLXNwZWNzIG1iLTIiIHYtZm9yPSJtb3ZpZV9zcGVjIGluIGN1cnJlbnRfbW92aWUuc3BlY3MiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDYgY2xhc3M9InRleHQtMTMgZm9udC13ZWlnaHQtNTAwIHByLTIiIHN0eWxlPSJtaW4td2lkdGg6MTUwcHg7Y29sb3I6bGlnaHRncmF5OyI+e3ttb3ZpZV9zcGVjLmxhYmVsfX08L2g2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDYgY2xhc3M9InRleHQtMTIgZm9udC13ZWlnaHQtNDAwICBiZy1wcmltYXJ5IHRleHQtd2hpdGUgcHgtMiByb3VuZGVkIHB5LTEiPjwvaDY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmxleC1hbGlnbjMgbWItMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0idGV4dC0xMyBmb250LXdlaWdodC01MDAgcHItMiIgc3R5bGU9Im1pbi13aWR0aDoxNTBweDtjb2xvcjpsaWdodGdyYXk7Ij5HZW5yZXMgPC9oNj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg2IGNsYXNzPSJ0ZXh0LTEyIGZvbnQtd2VpZ2h0LTQwMCAgYmctcHJpbWFyeSB0ZXh0LXdoaXRlIHB4LTIgcm91bmRlZCBweS0xIj57e2N1cnJlbnRfbW92aWUuY2F0ZWdvcnlfZGV0YWlsLm5hbWV9fTwvaDY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmxleC1hbGlnbjMgbWItMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0idGV4dC0xMyBmb250LXdlaWdodC01MDAgcHItMiIgc3R5bGU9Im1pbi13aWR0aDoxNTBweDtjb2xvcjpsaWdodGdyYXk7Ij5MYW5ndWFnZTwvaDY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0idGV4dC0xMiBmb250LXdlaWdodC00MDAgIGJnLXByaW1hcnkgdGV4dC13aGl0ZSBweC0yIHJvdW5kZWQgcHktMSI+e3tjdXJyZW50X21vdmllLmxhbmd1YWdlX2RldGFpbC5uYW1lfX08L2g2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNCBtaW4tNzY4Ij4KICAgICAgICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0idGV4dC0xNCBtYi0zIGZvbnQtd2VpZ2h0LTYwMCI+UmVjb21tZW5kZWQgTW92aWVzIGZvciB5b3U8L2g2PgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNiIgdi1mb3I9Im1vdmllIGluIHJlY29tbWVuZGVkX21vdmllcyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImltYWdlLXJvdyIgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJob3Zlci1tb2RhbCBpbWFnZSBtbC0wIiA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJvdXRlci1saW5rIDp0bz0iZWRpdD8nJzp7bmFtZTondmlkZW8nLHBhcmFtczogeyB0eXBlOiBzbHVnaWZ5KG1vdmllLnR5cGUpLCBjYXRlZ29yeTogc2x1Z2lmeShtb3ZpZS5jYXRlZ29yeV9kZXRhaWwubmFtZSksIHNsdWc6IG1vdmllLnNsdWcgfSwgcXVlcnk6IHtsYW5ndWFnZTptb3ZpZS5sYW5ndWFnZV9kZXRhaWwubmFtZX19Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icG9zaXRpb24tcmVsYXRpdmUiID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgOnNyYz0iYXBpX3VybCttb3ZpZS50aHVtYm5haWwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhvdmVyLW1vZGFsLWRpdiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNtYWxsLWRldGFpbHMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNSBjbGFzcz0idGV4dC0xNCBmb250LXdlaWdodC02MDAgbXQtMSB0ZXh0LXdoaXRlIj57e21vdmllLm5hbWV9fTwvaDU+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDUgY2xhc3M9InRleHQtMTAgZm9udC13ZWlnaHQtNjAwIG10LTEgdGV4dC1saWdodCI+PHNwYW4gY2xhc3M9IiBwci0yIj45OCUgbWF0Y2g8L3NwYW4+PHNwYW4gY2xhc3M9IiBwci0yIj4yMDIyPC9zcGFuPjJoIDMwbTwvaDU+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZsZXgtYWxpZ24zIG10LTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJyb3VuZGVkIHB5LTEgZmxleC1hbGlnbjMgbW9kYWwtaWNvbnMiIHN0eWxlPSJib3JkZXI6MXB4IHNvbGlkIHdoaXRlO2JhY2tncm91bmQtY29sb3I6aW5pdGlhbDsiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXBsYXkgIHRleHQtd2hpdGUgIiBzdHlsZT0iZm9udC1zaXplOjEwcHg7Ij48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDUgY2xhc3M9InRleHQtMTAgdGV4dC13aGl0ZSBmb250LXdlaWdodC02MDAiPldhdGNoPC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9InJvdW5kZWQgcHktMSBmbGV4LWFsaWduMyBtb2RhbC1pY29ucyIgc3R5bGU9ImJvcmRlcjpub25lO2JhY2tncm91bmQtY29sb3I6aW5pdGlhbDsiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXNoYXJlLWFsdCAgdGV4dC13aGl0ZSAiIHN0eWxlPSJmb250LXNpemU6MTBweDsiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNSBjbGFzcz0idGV4dC0xMCB0ZXh0LXdoaXRlIGZvbnQtd2VpZ2h0LTYwMCI+U2hhcmU8L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcm91dGVyLWxpbms+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+IAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8ZGl2IHYtZWxzZT4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgcG9zaXRpb24tcmVsYXRpdmUiIHN0eWxlPSJtYXJnaW4tdG9wOjgwcHg7bWluLWhlaWdodDogY2FsYygxMDB2aCAtIDM0MHB4KTsiPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtOCBwbGF5LXZpZGVvLWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhbmltYXRlZC1iYWNrZ3JvdW5kIHdpZHRoLTEwMCBoZWlnaHQtMTAwIiBzdHlsZT0iYXNwZWN0LXJhdGlvOiAxNi85OyI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib3ZlcmxheS1pbi12aWRlbyBweC1sZy01IHB4LTQiPgogICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idmlkZW8tY29udHJvbHMgbWItMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InctMTAwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InctNTAgIiBzdHlsZT0icG9zaXRpb246IHJlbGF0aXZlO3otaW5kZXg6IDk5OTsiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNSBjbGFzcz0iaGVpZ2h0NCBhbmltYXRlZC1iYWNrZ3JvdW5kIiBzdHlsZT0id2lkdGg6MzAwcHg7Ij48L2g1PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyYXRpbmdzIGZsZXgtYWxpZ24zIG15LTMiIHN0eWxlPSJvcGFjaXR5Oi41OyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNSBjbGFzcz0iaGVpZ2h0MyBhbmltYXRlZC1iYWNrZ3JvdW5kIiBzdHlsZT0id2lkdGg6MzYwcHg7Ij48L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0YXJzIG15LTMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZsZXgtYWxpZ24zIG1vdmllLXNwZWNzIG15LTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDUgY2xhc3M9ImhlaWdodDMgbXItMyAgYW5pbWF0ZWQtYmFja2dyb3VuZCIgc3R5bGU9Im1pbi13aWR0aDoxNTBweDsiPjwvaDU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNSBjbGFzcz0iaGVpZ2h0NSB3aWR0aDkgYW5pbWF0ZWQtYmFja2dyb3VuZCIgPjwvaDU+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZsZXgtYWxpZ24zIG1vdmllLXNwZWNzIG15LTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDUgY2xhc3M9ImhlaWdodDMgbXItMyAgYW5pbWF0ZWQtYmFja2dyb3VuZCIgc3R5bGU9Im1pbi13aWR0aDoxNTBweDsiPjwvaDU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNSBjbGFzcz0iaGVpZ2h0NSB3aWR0aDkgYW5pbWF0ZWQtYmFja2dyb3VuZCIgPjwvaDU+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZsZXgtYWxpZ24zIG1vdmllLXNwZWNzIG15LTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDUgY2xhc3M9ImhlaWdodDMgbXItMyAgYW5pbWF0ZWQtYmFja2dyb3VuZCIgc3R5bGU9Im1pbi13aWR0aDoxNTBweDsiPjwvaDU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNSBjbGFzcz0iaGVpZ2h0NSB3aWR0aDkgYW5pbWF0ZWQtYmFja2dyb3VuZCIgPjwvaDU+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNCBtaW4tNzY4Ij4KICAgICAgICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0iaGVpZ2h0MyB3aWR0aDkgYW5pbWF0ZWQtYmFja2dyb3VuZCBweC01IG1iLTIiPjwvaDY+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC02Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW1hZ2Utcm93IiA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJob3Zlci1tb2RhbCBpbWFnZSBtbC0wIiA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icG9zaXRpb24tcmVsYXRpdmUiID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYW5pbWF0ZWQtYmFja2dyb3VuZCB3aWR0aC0xMDAgaGVpZ2h0LTEwMCIgc3R5bGU9ImFzcGVjdC1yYXRpbzogMi8yLjg7Ij48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+IAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC02Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW1hZ2Utcm93IiA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJob3Zlci1tb2RhbCBpbWFnZSBtbC0wIiA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icG9zaXRpb24tcmVsYXRpdmUiID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYW5pbWF0ZWQtYmFja2dyb3VuZCB3aWR0aC0xMDAgaGVpZ2h0LTEwMCIgc3R5bGU9ImFzcGVjdC1yYXRpbzogMi8yLjg7Ij48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+IAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC02Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW1hZ2Utcm93IiA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJob3Zlci1tb2RhbCBpbWFnZSBtbC0wIiA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icG9zaXRpb24tcmVsYXRpdmUiID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYW5pbWF0ZWQtYmFja2dyb3VuZCB3aWR0aC0xMDAgaGVpZ2h0LTEwMCIgc3R5bGU9ImFzcGVjdC1yYXRpbzogMi8yLjg7Ij48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+IAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC02Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW1hZ2Utcm93IiA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJob3Zlci1tb2RhbCBpbWFnZSBtbC0wIiA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icG9zaXRpb24tcmVsYXRpdmUiID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYW5pbWF0ZWQtYmFja2dyb3VuZCB3aWR0aC0xMDAgaGVpZ2h0LTEwMCIgc3R5bGU9ImFzcGVjdC1yYXRpbzogMi8yLjg7Ij48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+IAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJzZWNvbmQtc2VjdGlvbiBtYWluLXBhZ2Utc2VjICIgdi1pZj0iaXNfc3RhcnQiPgoKICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbWFnZS1ncmlkIiB2LWZvcj0iYmxvY2sgaW4gYmxvY2tzIiBAY2xpY2s9InNlbGVjdENvbnRlbnQocGJsaykiIDpjbGFzcz0iYmxvY2suaXNfZWRpdD8nc2VsZWN0ZWRfY29udGVudCc6JyciIDppZD0iJ2Jsb2Nrc18nK2Jsb2NrLmlkIiB2LXNob3c9ImJsb2NrLnN0YXR1cyIgdi1pZj0iYmxvY2subW92aWVfdHlwZSE9J05vbmUnIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icG9zaXRpb24tcmVsYXRpdmUiID4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZsZXgtYWxpZ24iID4KICAgICAgICAgICAgICAgICAgICAgICAgICA8aDYgY2xhc3M9InNlY3Rpb24tc2lkZWhlYWQgdGV4dC13aGl0ZSAgcGwtMiI+e3tibG9jay52YWx1ZX19PC9oNj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8aDYgY2xhc3M9InRleHQtbW9yZSBtci0zIj5WaWV3IE1vcmUgPC9oNj4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPGItY2Fyb3VzZWwKICAgICAgICAgICAgICAgICAgICAgICAgICA6aWQ9Iidtb3ZpZScrYmxvY2suaWQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InNsaWRlci1tb3ZpZSAgcHktMCIKICAgICAgICAgICAgICAgICAgICAgICAgICA6aW50ZXJ2YWw9IjQwMDAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbHM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGItY2Fyb3VzZWwtc2xpZGUgdi1mb3I9InNvcnRfbW92aWUgaW4gYmxvY2subW92aWVzLmRhdGFzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlICNpbWc+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbWFnZS1yb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhvdmVyLW1vZGFsIGltYWdlInYtZm9yPSJtb3ZpZSBpbiBzb3J0X21vdmllIiBAY2xpY2s9ImN1cnJlbnRfbW92aWU9bW92aWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cm91dGVyLWxpbmsgOnRvPSJlZGl0PycnOntuYW1lOid2aWRlbycscGFyYW1zOiB7IHR5cGU6IHNsdWdpZnkobW92aWUudHlwZSksIGNhdGVnb3J5OiBzbHVnaWZ5KG1vdmllLmNhdGVnb3J5X2RldGFpbC5uYW1lKSwgc2x1ZzogbW92aWUuc2x1ZyB9LCBxdWVyeToge2xhbmd1YWdlOm1vdmllLmxhbmd1YWdlX2RldGFpbC5uYW1lfX0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwb3NpdGlvbi1yZWxhdGl2ZSIgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyA6c3JjPSJhcGlfdXJsK21vdmllLnRodW1ibmFpbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhvdmVyLW1vZGFsLWRpdiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNtYWxsLWRldGFpbHMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1IGNsYXNzPSJ0ZXh0LTE0IGZvbnQtd2VpZ2h0LTYwMCBtdC0xIHRleHQtd2hpdGUiPnt7bW92aWUubmFtZX19PC9oNT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tPGg1IGNsYXNzPSJ0ZXh0LTEwIGZvbnQtd2VpZ2h0LTYwMCBtdC0xIHRleHQtd2hpdGUiPnt7bW92aWUuZGVzY3JpcHRpb259fTwvaDU+LS0+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1IGNsYXNzPSJ0ZXh0LTEwIGZvbnQtd2VpZ2h0LTYwMCBtdC0xIHRleHQtbGlnaHQiPjxzcGFuIGNsYXNzPSIgcHItMiI+OTglIG1hdGNoPC9zcGFuPjxzcGFuIGNsYXNzPSIgcHItMiI+MjAyMjwvc3Bhbj4yaCAzMG08L2g1PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZsZXgtYWxpZ24zIGcxIG10LTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9InJvdW5kZWQgcHktMSBmbGV4LWFsaWduMyBtb2RhbC1pY29ucyIgc3R5bGU9ImJvcmRlcjoxcHggc29saWQgd2hpdGU7YmFja2dyb3VuZC1jb2xvcjppbml0aWFsOyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1wbGF5ICB0ZXh0LXdoaXRlICIgc3R5bGU9ImZvbnQtc2l6ZToxMHB4OyI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDUgY2xhc3M9InRleHQtMTAgdGV4dC13aGl0ZSBmb250LXdlaWdodC02MDAiPldhdGNoPC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJyb3VuZGVkIHB5LTEgZmxleC1hbGlnbjMgbW9kYWwtaWNvbnMiIHN0eWxlPSJib3JkZXI6bm9uZTtiYWNrZ3JvdW5kLWNvbG9yOmluaXRpYWw7Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXNoYXJlLWFsdCAgdGV4dC13aGl0ZSAiIHN0eWxlPSJmb250LXNpemU6MTBweDsiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1IGNsYXNzPSJ0ZXh0LTEwIHRleHQtd2hpdGUgZm9udC13ZWlnaHQtNjAwIj5TaGFyZTwvaDU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcm91dGVyLWxpbms+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvYi1jYXJvdXNlbC1zbGlkZT4KICAgICAgICAgICAgICAgICAgICAgIDwvYi1jYXJvdXNlbD4KICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJzZWNvbmQtc2VjdGlvbiBtYWluLXBhZ2Utc2VjICIgdi1lbHNlPgoKICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbWFnZS1ncmlkIiB2LWZvcj0iYmxvY2sgaW4gYmxvY2tzIiBAY2xpY2s9InNlbGVjdENvbnRlbnQocGJsaykiIDpjbGFzcz0iYmxvY2suaXNfZWRpdD8nc2VsZWN0ZWRfY29udGVudCc6JyciIDppZD0iJ2Jsb2Nrc18nK2Jsb2NrLmlkIiB2LXNob3c9ImJsb2NrLnN0YXR1cyIgdi1pZj0iYmxvY2subW92aWVfdHlwZSE9J05vbmUnIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icG9zaXRpb24tcmVsYXRpdmUiID4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZsZXgtYWxpZ24iID4KICAgICAgICAgICAgICAgICAgICAgICAgICA8aDYgY2xhc3M9ImhlaWdodDMgd2lkdGg1IGFuaW1hdGVkLWJhY2tncm91bmQgbWwtMiBweC01Ij48L2g2PgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8Yi1jYXJvdXNlbAogICAgICAgICAgICAgICAgICAgICAgICAgIDppZD0iJ21vdmllJytibG9jay5pZCIKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ic2xpZGVyLW1vdmllICBweS0wIgogICAgICAgICAgICAgICAgICAgICAgICAgIDppbnRlcnZhbD0iNDAwMCIKICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9scz4KICAgICAgICAgICAgICAgICAgICAgICAgICA8Yi1jYXJvdXNlbC1zbGlkZSB2LWZvcj0ic29ydF9tb3ZpZSBpbiBibG9jay5tb3ZpZXMuZGF0YXMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgI2ltZz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImltYWdlLXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaG92ZXItbW9kYWwgaW1hZ2Uidi1mb3I9Im1vdmllIGluIHNvcnRfbW92aWUiIEBjbGljaz0iY3VycmVudF9tb3ZpZT1tb3ZpZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxyb3V0ZXItbGluayA6dG89ImVkaXQ/Jyc6e25hbWU6J3ZpZGVvJyxwYXJhbXM6IHsgdHlwZTogc2x1Z2lmeShtb3ZpZS50eXBlKSwgY2F0ZWdvcnk6IHNsdWdpZnkobW92aWUuY2F0ZWdvcnlfZGV0YWlsLm5hbWUpLCBzbHVnOiBtb3ZpZS5zbHVnIH0sIHF1ZXJ5OiB7bGFuZ3VhZ2U6bW92aWUubGFuZ3VhZ2VfZGV0YWlsLm5hbWV9fSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBvc2l0aW9uLXJlbGF0aXZlIiA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhbmltYXRlZC1iYWNrZ3JvdW5kIHdpZHRoLTEwMCBoZWlnaHQtMTAwIiBzdHlsZT0iYXNwZWN0LXJhdGlvOiAyLzIuODsiPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3JvdXRlci1saW5rPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2ItY2Fyb3VzZWwtc2xpZGU+CiAgICAgICAgICAgICAgICAgICAgICA8L2ItY2Fyb3VzZWw+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgIDxiLW1vZGFsIGlkPSJwYXltZW50IiBoaWRlLWhlYWRlciBoaWRlLWZvb3Rlcj4KICAgICAgICAgICAgPGltZyBzcmM9Ii9hbGwtaW1hZ2VzL2Nsb3NlLnBuZyIgY2xhc3M9ImN1cnNvci1wb2ludGVyIiBzdHlsZT0icG9zaXRpb246YWJzb2x1dGU7dG9wOjIwcHg7cmlnaHQ6MjBweDt6LWluZGV4Ojk5OTt3aWR0aDoxNXB4O2hlaWdodDoxNXB4OyIgQGNsaWNrPSIkYnZNb2RhbC5oaWRlKCdwYXltZW50JykiPgogICAgICAgICAgICA8ZGl2PgoKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBsYW4tc2VjMiBwLTQiIHN0eWxlPSJtYXgtaGVpZ2h0OiA2NnZoO292ZXJmbG93OiBhdXRvOyI+CiAgICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0idGV4dC13aGl0ZSBmb250LXdlaWdodC01MDAgbWItNCB0ZXh0LTIwIj5WaWRlbyBSZW50IDwvaDY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBsYW4tY2FyZDIgcm93IG14LTAiIHYtaWY9ImNybnRfdGFiPT0ndGFiMSciPgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciB3LTEwMCBnMyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyA6c3JjPSJjdXJyZW50X21vdmllLm1vYmlsZV90aHVtYm5haWw/YXBpX3VybCtjdXJyZW50X21vdmllLm1vYmlsZV90aHVtYm5haWw6YXBpX3VybCtjdXJyZW50X21vdmllLnRodW1ibmFpbCIgIGNsYXNzPSIiICBzdHlsZT0id2lkdGg6IDkwcHg7Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDUgY2xhc3M9InRleHQtMTQgZm9udC13ZWlnaHQtNTAwIG1iLTEiPnt7Y3VycmVudF9tb3ZpZS5uYW1lfX0gKHt7Y3VycmVudF9tb3ZpZS5sYW5ndWFnZV9kZXRhaWwubmFtZX19KTwvaDU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0idGV4dC0xMiB0ZXh0LWxpZ2h0IGZvbnQtd2VpZ2h0LTUwMCBtYi0xIj57e2N1cnJlbnRfbW92aWUudHlwZX19PC9oNj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg2IGNsYXNzPSJ0ZXh0LTEyIHRleHQtbGlnaHQgZm9udC13ZWlnaHQtNTAwIG1iLTEiPjJoIDUxbSAxMHM8L2g2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDYgY2xhc3M9InRleHQtMTIgdGV4dC1saWdodCBmb250LXdlaWdodC01MDAgbWItMSI+e3tjdXJyZW50X21vdmllLmNhdGVnb3J5X2RldGFpbC5uYW1lfX08L2g2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGV4dC0xMiB0ZXh0LWxpZ2h0IGZvbnQtd2VpZ2h0LTUwMCBtYi0xIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDguMyA8c3BhbiBjbGFzcz0iaW1kYiBtbC0yIj5JTURCPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtdC0zIGJvcmRlci10b3Agdy0xMDAgcHQtNCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGg2IGNsYXNzPSJ0ZXh0LTE0IGZvbnQtd2VpZ2h0LTYwMCBtYi0yIj5SZW50IG1vdmllPC9oNj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8aDYgY2xhc3M9InRleHQtMTIgZm9udC13ZWlnaHQtNTAwIHRleHQtbGlnaHQiPlN0YXJ0IHdpdGhpbiAzMCBkYXlzLCBmaW5pc2ggd2l0aGluIDQ4IGhvdXJzIGFmdGVyIGZpcnN0IHBsYXliYWNrPC9oNj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmbGV4LWFsaWduIGcyIG1iLTMgbXQtMyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0ibWItMCB0ZXh0LTE0IGZvbnQtd2VpZ2h0LTYwMCIgPkhpZ2ggRGVmaW5pdGlvbjwvaDY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0ibWItMCBidG4gcHktMSBweC0yIGJ0bi1wcmltYXJ5IGZvbnQtd2VpZ2h0LTYwMCIgc3R5bGU9ImZvbnQtc2l6ZTogMTJweDsiIEBjbGljaz0iY3JudF90YWI9J3RhYjInIj4kIDE1MC4wMDwvaDY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im10LTMgYm9yZGVyLXRvcCBwdC00IHctMTAwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8aDYgY2xhc3M9InRleHQtMTQgbWItMiBmb250LXdlaWdodC02MDAiPkJ1eSBtb3ZpZTwvaDY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmxleC1hbGlnbiBnMiBtYi0zIG10LTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDYgY2xhc3M9Im1iLTAgdGV4dC0xNCAgZm9udC13ZWlnaHQtNjAwIj5VbHRyYXkgSGlnaCBEZWZpbml0aW9uPC9oNj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg2IGNsYXNzPSJtYi0wIGJ0biBweS0xIHB4LTIgYnRuLXByaW1hcnkgZm9udC13ZWlnaHQtNjAwIiBzdHlsZT0iZm9udC1zaXplOiAxMnB4OyIgQGNsaWNrPSJjcm50X3RhYj0ndGFiMiciPiQgNzUwLjAwPC9oNj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmbGV4LWFsaWduIGcyIG1iLTMgbXQtMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0ibWItMCB0ZXh0LTE0ICBmb250LXdlaWdodC02MDAiPlN0YW5kYXJkIERlZmluaXRpb248L2g2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDYgY2xhc3M9Im1iLTAgYnRuIHB5LTEgcHgtMiBidG4tcHJpbWFyeSBmb250LXdlaWdodC02MDAiIHN0eWxlPSJmb250LXNpemU6IDEycHg7IiBAY2xpY2s9ImNybnRfdGFiPSd0YWIyJyI+JCA2MDAuMDA8L2g2PgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwbGFuLWNhcmQyIHJvdyBteC0wIiB2LWlmPSJjcm50X3RhYj09J3RhYjInIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIgcC0wIHBsYW4tY2FyZC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmxleC1hbGlnbiBtYi00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICA8aDYgY2xhc3M9InRleHQtMTYgZm9udC13ZWlnaHQtNTAwICBtYi0wIj5TZWxlY3QgUGF5bWVudCBNZXRob2Q8L2g2PgogICAgICAgICAgICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0ibWItMCB0ZXh0LTEyIHRleHQtaW5mbyBjdXJzb3ItcG9pbnRlciIgQGNsaWNrPSJjcm50X3RhYj0ndGFiMSciPkJhY2s8L2g2PgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJidG4gYnRuLXByaW1hcnktb3V0bGluZSByb3VuZGVkMiBweS0yIHctMTAwIG15LTIiIHYtZm9yPSJwYXltZW50X21ldGhvZCBpbiBwYXltZW50X21ldGhvZHMiIEBjbGljaz0ic2V0UmF6b3JwYXkoKSI+e3twYXltZW50X21ldGhvZC5uYW1lfX08L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2ItbW9kYWw+ICAKCiAgICAgIDwvZGl2PgogICAgICA8TWFpbkZvb3RlciA6ZWRpdD0iZWRpdCIgOmJsb2Nrcz0iYmxvY2tzIiA6Y3VycmVudF9ibG9jaz0iY3VycmVudF9ibG9jayI+PC9NYWluRm9vdGVyPgo8L2Rpdj4K"},null]}