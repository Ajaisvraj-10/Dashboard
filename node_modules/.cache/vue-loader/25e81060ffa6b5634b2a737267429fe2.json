{"remainingRequest":"/Users/muhammed/Documents/vue_projects/backend/biowin aeo/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/muhammed/Documents/vue_projects/backend/biowin aeo/src/views/app/pages/normal-procurement-detail.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/muhammed/Documents/vue_projects/backend/biowin aeo/src/views/app/pages/normal-procurement-detail.vue","mtime":1678376542031},{"path":"/Users/muhammed/Documents/vue_projects/backend/biowin aeo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/muhammed/Documents/vue_projects/backend/biowin aeo/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/muhammed/Documents/vue_projects/backend/biowin aeo/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/muhammed/Documents/vue_projects/backend/biowin aeo/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Users/muhammed/Documents/vue_projects/backend/biowin aeo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/muhammed/Documents/vue_projects/backend/biowin aeo/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}