{"remainingRequest":"E:\\vue_projects\\biowin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\vue_projects\\biowin\\src\\views\\app\\oodo\\fpo\\farmer-form.vue?vue&type=template&id=33cdad5a&","dependencies":[{"path":"E:\\vue_projects\\biowin\\src\\views\\app\\oodo\\fpo\\farmer-form.vue","mtime":1655453395305},{"path":"E:\\vue_projects\\biowin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\vue_projects\\biowin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"E:\\vue_projects\\biowin\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1574476662000},{"path":"E:\\vue_projects\\biowin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\vue_projects\\biowin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}