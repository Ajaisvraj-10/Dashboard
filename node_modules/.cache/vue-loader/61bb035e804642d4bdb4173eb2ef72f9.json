{"remainingRequest":"/Users/muhammed/Documents/vue_projects/ott-frontent/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/muhammed/Documents/vue_projects/ott-frontent/src/views/app/videozone_web/home.vue?vue&type=template&id=f09412cc&scoped=true&","dependencies":[{"path":"/Users/muhammed/Documents/vue_projects/ott-frontent/src/views/app/videozone_web/home.vue","mtime":1684056454000},{"path":"/Users/muhammed/Documents/vue_projects/ott-frontent/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/muhammed/Documents/vue_projects/ott-frontent/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/muhammed/Documents/vue_projects/ott-frontent/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/muhammed/Documents/vue_projects/ott-frontent/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}