{"remainingRequest":"/Users/muhammed/Documents/vue_projects/ott-frontent/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/muhammed/Documents/vue_projects/ott-frontent/src/views/app/amazone_app/home.vue?vue&type=template&id=4bed4073&scoped=true&","dependencies":[{"path":"/Users/muhammed/Documents/vue_projects/ott-frontent/src/views/app/amazone_app/home.vue","mtime":1665686468000},{"path":"/Users/muhammed/Documents/vue_projects/ott-frontent/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/muhammed/Documents/vue_projects/ott-frontent/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/muhammed/Documents/vue_projects/ott-frontent/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/muhammed/Documents/vue_projects/ott-frontent/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}