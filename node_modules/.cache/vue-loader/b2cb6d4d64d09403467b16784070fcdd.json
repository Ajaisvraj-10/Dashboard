{"remainingRequest":"C:\\Users\\HP\\OneDrive\\Desktop\\Videopages\\videopages-frontent\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\HP\\OneDrive\\Desktop\\Videopages\\videopages-frontent\\src\\views\\app\\videozone_app\\video.vue?vue&type=template&id=511fa7f6&scoped=true&","dependencies":[{"path":"C:\\Users\\HP\\OneDrive\\Desktop\\Videopages\\videopages-frontent\\src\\views\\app\\videozone_app\\video.vue","mtime":1691816395768},{"path":"C:\\Users\\HP\\OneDrive\\Desktop\\Videopages\\videopages-frontent\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1691816385086},{"path":"C:\\Users\\HP\\OneDrive\\Desktop\\Videopages\\videopages-frontent\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1691816392152},{"path":"C:\\Users\\HP\\OneDrive\\Desktop\\Videopages\\videopages-frontent\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1691816385086},{"path":"C:\\Users\\HP\\OneDrive\\Desktop\\Videopages\\videopages-frontent\\node_modules\\vue-loader\\lib\\index.js","mtime":1691816392152}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}