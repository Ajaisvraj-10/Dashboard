{"remainingRequest":"/Users/muhammed/Documents/vue_projects/biowin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/muhammed/Documents/vue_projects/biowin/src/views/app/oodo/production/process/processing-component.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/muhammed/Documents/vue_projects/biowin/src/views/app/oodo/production/process/processing-component.vue","mtime":1676396180000},{"path":"/Users/muhammed/Documents/vue_projects/biowin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/muhammed/Documents/vue_projects/biowin/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/muhammed/Documents/vue_projects/biowin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/muhammed/Documents/vue_projects/biowin/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Users/muhammed/Documents/vue_projects/biowin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/muhammed/Documents/vue_projects/biowin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}