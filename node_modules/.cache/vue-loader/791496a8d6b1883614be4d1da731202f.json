{"remainingRequest":"/Users/muhammed/Documents/vue_projects/biowin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/muhammed/Documents/vue_projects/biowin/src/views/app/dashboards/dashboard.v3.vue?vue&type=template&id=25d6b5a2&","dependencies":[{"path":"/Users/muhammed/Documents/vue_projects/biowin/src/views/app/dashboards/dashboard.v3.vue","mtime":1587811212000},{"path":"/Users/muhammed/Documents/vue_projects/biowin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/muhammed/Documents/vue_projects/biowin/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/muhammed/Documents/vue_projects/biowin/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Users/muhammed/Documents/vue_projects/biowin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/muhammed/Documents/vue_projects/biowin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxkaXYgY2xhc3M9Im1haW4tY29udGVudCI+CiAgPGJyZWFkY3VtYiA6cGFnZT0iJ1ZlcnNpb24gMyciIDpmb2xkZXI9IidEYXNoYm9hcmQnIiAvPgogIDxiLXJvdz4KICAgIDwhLS0gd2lkZ2V0LWNoYXJ0LS1iYXIgcGhhc2UtMyAtLT4KICAgIDxiLWNvbCBtZD0iNiIgc209IjYiIGxnPSI2IiB4bD0iMyIgbXQ9IjMiPgogICAgICA8Yi1jYXJkIGNsYXNzPSIgbWItMzAiPgogICAgICAgIDxkaXYgY2xhc3M9InVsLXdpZGdldF9fcm93LXYyIj4KICAgICAgICAgIDxkaXYgaWQ9ImNoYXJ0Ij4KICAgICAgICAgICAgPGFwZXhjaGFydAogICAgICAgICAgICAgIHR5cGU9ImJhciIKICAgICAgICAgICAgICBoZWlnaHQ9IjEwMCIKICAgICAgICAgICAgICA6b3B0aW9ucz0id2lkZ2V0QmFyQ2hhcnRUaHJlZS5jaGFydE9wdGlvbnMiCiAgICAgICAgICAgICAgOnNlcmllcz0id2lkZ2V0QmFyQ2hhcnRUaHJlZS5zZXJpZXMiCiAgICAgICAgICAgIC8+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDxkaXYgY2xhc3M9InVsLXdpZGdldF9fY29udGVudC12MiI+CiAgICAgICAgICAgIDxoNCBjbGFzcz0iaGVhZGluZyBtdC0zIj42OTggMjEyPC9oND4KICAgICAgICAgICAgPHNtYWxsIGNsYXNzPSIgdGV4dC1tdXRlZCBtLTAiPgogICAgICAgICAgICAgIDUwJSBBdmVyYWdlCiAgICAgICAgICAgIDwvc21hbGw+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9iLWNhcmQ+CiAgICA8L2ItY29sPgogICAgPGItY29sIG1kPSI2IiBzbT0iNiIgbGc9IjYiIHhsPSIzIiAgbXQ9IjMiPgogICAgICA8Yi1jYXJkIGNsYXNzPSIgbWItMzAiPgogICAgICAgIDxkaXYgY2xhc3M9InVsLXdpZGdldF9fcm93LXYyIj4KICAgICAgICAgIDxkaXYgaWQ9ImNoYXJ0Ij4KICAgICAgICAgICAgPGFwZXhjaGFydAogICAgICAgICAgICAgIHR5cGU9ImJhciIKICAgICAgICAgICAgICBoZWlnaHQ9IjEwMCIKICAgICAgICAgICAgICA6b3B0aW9ucz0id2lkZ2V0QmFyQ2hhcnRGb3VyLmNoYXJ0T3B0aW9ucyIKICAgICAgICAgICAgICA6c2VyaWVzPSJ3aWRnZXRCYXJDaGFydEZvdXIuc2VyaWVzIgogICAgICAgICAgICAvPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJ1bC13aWRnZXRfX2NvbnRlbnQtdjIiPgogICAgICAgICAgICA8aDQgY2xhc3M9ImhlYWRpbmcgbXQtMyI+MzY5IDIxMjwvaDQ+CiAgICAgICAgICAgIDxzbWFsbCBjbGFzcz0iIHRleHQtbXV0ZWQgbS0wIj4KICAgICAgICAgICAgICAyNCUgQXZlcmFnZQogICAgICAgICAgICA8L3NtYWxsPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvYi1jYXJkPgogICAgPC9iLWNvbD4KICAgIDxiLWNvbCBtZD0iNiIgc209IjYiIGxnPSI2IiB4bD0iMyIgIG10PSIzIj4KICAgICAgPGItY2FyZCBjbGFzcz0iIG1iLTMwIj4KICAgICAgICA8ZGl2IGNsYXNzPSJ1bC13aWRnZXRfX3Jvdy12MiI+CiAgICAgICAgICA8ZGl2IGlkPSJjaGFydCI+CiAgICAgICAgICAgIDxhcGV4Y2hhcnQKICAgICAgICAgICAgICB0eXBlPSJiYXIiCiAgICAgICAgICAgICAgaGVpZ2h0PSIxMDAiCiAgICAgICAgICAgICAgOm9wdGlvbnM9IndpZGdldEJhckNoYXJ0Rml2ZS5jaGFydE9wdGlvbnMiCiAgICAgICAgICAgICAgOnNlcmllcz0id2lkZ2V0QmFyQ2hhcnRGaXZlLnNlcmllcyIKICAgICAgICAgICAgLz4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPGRpdiBjbGFzcz0idWwtd2lkZ2V0X19jb250ZW50LXYyIj4KICAgICAgICAgICAgPGg0IGNsYXNzPSJoZWFkaW5nIG10LTMiPjM2OSAyMTI8L2g0PgogICAgICAgICAgICA8c21hbGwgY2xhc3M9IiB0ZXh0LW11dGVkIG0tMCI+CiAgICAgICAgICAgICAgMjQlIEF2ZXJhZ2UKICAgICAgICAgICAgPC9zbWFsbD4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICA8L2ItY2FyZD4KICAgIDwvYi1jb2w+CiAgICA8Yi1jb2wgbWQ9IjYiIHNtPSI2IiBsZz0iNiIgeGw9IjMiICBtdD0iMyI+CiAgICAgIDxiLWNhcmQgY2xhc3M9IiBtYi0zMCI+CiAgICAgICAgPGRpdiBjbGFzcz0idWwtd2lkZ2V0X19yb3ctdjIiPgogICAgICAgICAgPGRpdiBpZD0iY2hhcnQiPgogICAgICAgICAgICA8YXBleGNoYXJ0CiAgICAgICAgICAgICAgdHlwZT0iYmFyIgogICAgICAgICAgICAgIGhlaWdodD0iMTAwIgogICAgICAgICAgICAgIDpvcHRpb25zPSJ3aWRnZXRCYXJDaGFydFNpeC5jaGFydE9wdGlvbnMiCiAgICAgICAgICAgICAgOnNlcmllcz0id2lkZ2V0QmFyQ2hhcnRTaXguc2VyaWVzIgogICAgICAgICAgICAvPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJ1bC13aWRnZXRfX2NvbnRlbnQtdjIiPgogICAgICAgICAgICA8aDQgY2xhc3M9ImhlYWRpbmcgbXQtMyI+MzY5IDIxMjwvaDQ+CiAgICAgICAgICAgIDxzbWFsbCBjbGFzcz0iIHRleHQtbXV0ZWQgbS0wIj4KICAgICAgICAgICAgICAyNCUgQXZlcmFnZQogICAgICAgICAgICA8L3NtYWxsPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvYi1jYXJkPgogICAgPC9iLWNvbD4KCiAgICA8Yi1jb2wgbGc9IjEyIiB4bD0iNiIgbWQ9IjEyIj4KICAgICAgPGItcm93PgogICAgICAgIDxiLWNvbCBtZD0iMTIiPgogICAgICAgICAgPGItY2FyZCBjbGFzcz0iIG1iLTMwIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC10aXRsZSBtLTAiPk5ldHdvcmsgU3RhdHM8L2Rpdj4KICAgICAgICAgICAgPHAgY2xhc3M9InRleHQtc21hbGwgdGV4dC1tdXRlZCI+CiAgICAgICAgICAgICAgTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQgY29uc2VjdGV0dXIuCiAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgPGItcm93PgogICAgICAgICAgICAgIDxiLWNvbCBsZz0iNiIgbWQ9IjEyIiBjbGFzcz0iIG1iLTMwIj4KICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgY2xhc3M9InAtNCByb3VuZGVkIGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIgYmctcHJpbWFyeSB0ZXh0LXdoaXRlIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iaS1EYXRhLUJhY2t1cCB0ZXh0LTMyIG1yLTMiPjwvaT4KICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9InRleHQtMTggbWItMSB0ZXh0LXdoaXRlIj5EYXRhYmFzZXM8L2g0PgogICAgICAgICAgICAgICAgICAgIDxzcGFuPlRvdGFsOiAzMjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgICAgIDxiLWNvbCBsZz0iNiIgbWQ9IjEyIiBjbGFzcz0iIG1iLTMwIj4KICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgY2xhc3M9InAtNCByb3VuZGVkIGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIgYmctcHJpbWFyeSB0ZXh0LXdoaXRlIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iaS1CaWctRGF0YSB0ZXh0LTMyIG1yLTMiPjwvaT4KICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9InRleHQtMTggbWItMSB0ZXh0LXdoaXRlIj5CYWNrdXBzPC9oND4KICAgICAgICAgICAgICAgICAgICA8c3Bhbj4gVG90YWw6IDMwMjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgICAgIDxiLWNvbCBsZz0iNiIgbWQ9IjEyIiBjbGFzcz0iIG1iLTMwIj4KICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgY2xhc3M9InAtNCBib3JkZXIgYm9yZGVyLWxpZ2h0IHJvdW5kZWQgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImktRGF0YS1DbG91ZCB0ZXh0LTMyIG1yLTMiPjwvaT4KICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9InRleHQtMTggbWItMSI+U3BhY2U8L2g0PgogICAgICAgICAgICAgICAgICAgIDxzcGFuPlRvdGFsOiAxNjBHQjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgICAgIDxiLWNvbCBsZz0iNiIgbWQ9IjEyIiBjbGFzcz0iIG1iLTMwIj4KICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgY2xhc3M9InAtNCBib3JkZXIgYm9yZGVyLWxpZ2h0IHJvdW5kZWQgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImktRGF0YS1Eb3dubG9hZCB0ZXh0LTMyIG1yLTMiPjwvaT4KICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9InRleHQtMTggbWItMSI+RG93bmxvYWQ8L2g0PgogICAgICAgICAgICAgICAgICAgIDxzcGFuPlRvdGFsOiAzMEdCPC9zcGFuPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvYi1jb2w+CiAgICAgICAgICAgIDwvYi1yb3c+CiAgICAgICAgICA8L2ItY2FyZD4KICAgICAgICA8L2ItY29sPgogICAgICAgIDxiLWNvbCBtZD0iNiI+CiAgICAgICAgICA8Yi1jYXJkIGNsYXNzPSJjYXJkLXByb2ZpbGUtMSBtYi0zMCB0ZXh0LWNlbnRlciI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF2YXRhciBib3gtc2hhZG93LTIgbWItMyI+CiAgICAgICAgICAgICAgPGltZyBzcmM9IkAvYXNzZXRzL2ltYWdlcy9mYWNlcy8xNi5qcGciIGFsdD0iIiAvPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGg1IGNsYXNzPSJtLTAiPkphc3NpY2EgSGlrZTwvaDU+CiAgICAgICAgICAgIDxwIGNsYXNzPSJtdC0wIHRleHQtbXV0ZWQiPlVJL1VYIERlc2lnbmVyPC9wPgogICAgICAgICAgICA8cD4KICAgICAgICAgICAgICBMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCBjb25zZWN0ZXR1ciBhZGlwaXNpY2luZyBlbGl0LgogICAgICAgICAgICAgIFJlY3VzYW5kYWUgY3VtcXVlLgogICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4tcHJpbWFyeSBidG4tcm91bmRlZCI+CiAgICAgICAgICAgICAgQ29udGFjdCBKYXNzaWNhCiAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLXNvY2lhbHMtc2ltcGxlIG10LTQiPgogICAgICAgICAgICAgIDxhIGhyZWY9IiI+CiAgICAgICAgICAgICAgICA8aSBjbGFzcz0iaS1MaW5rZWRpbi0yIj48L2k+CiAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgIDxhIGhyZWY9IiI+CiAgICAgICAgICAgICAgICA8aSBjbGFzcz0iaS1GYWNlYm9vay0yIj48L2k+CiAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgIDxhIGhyZWY9IiI+CiAgICAgICAgICAgICAgICA8aSBjbGFzcz0iaS1Ud2l0dGVyIj48L2k+CiAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvYi1jYXJkPgogICAgICAgIDwvYi1jb2w+CiAgICAgICAgPGItY29sIG1kPSI2Ij4KICAgICAgICAgIDxiLWNhcmQgY2xhc3M9ImNhcmQtcHJvZmlsZS0xIG1iLTMwIHRleHQtY2VudGVyIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXZhdGFyIGJveC1zaGFkb3ctMiBtYi0zIj4KICAgICAgICAgICAgICA8aW1nIHNyYz0iQC9hc3NldHMvaW1hZ2VzL2ZhY2VzLzIuanBnIiBhbHQ9IiIgLz4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxoNSBjbGFzcz0ibS0wIj5KYW1lcyBIaWtlPC9oNT4KICAgICAgICAgICAgPHAgY2xhc3M9Im10LTAgdGV4dC1tdXRlZCI+VlIgRGV2ZWxvcGVyPC9wPgogICAgICAgICAgICA8cD4KICAgICAgICAgICAgICBMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCBjb25zZWN0ZXR1ciBhZGlwaXNpY2luZyBlbGl0LgogICAgICAgICAgICAgIFJlY3VzYW5kYWUgY3VtcXVlLgogICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4tcHJpbWFyeSBidG4tcm91bmRlZCI+CiAgICAgICAgICAgICAgQ29udGFjdCBKYXNzaWNhCiAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLXNvY2lhbHMtc2ltcGxlIG10LTQiPgogICAgICAgICAgICAgIDxhIGhyZWY9IiI+CiAgICAgICAgICAgICAgICA8aSBjbGFzcz0iaS1MaW5rZWRpbi0yIj48L2k+CiAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgIDxhIGhyZWY9IiI+CiAgICAgICAgICAgICAgICA8aSBjbGFzcz0iaS1GYWNlYm9vay0yIj48L2k+CiAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgIDxhIGhyZWY9IiI+CiAgICAgICAgICAgICAgICA8aSBjbGFzcz0iaS1Ud2l0dGVyIj48L2k+CiAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvYi1jYXJkPgogICAgICAgIDwvYi1jb2w+CiAgICAgICAgPGItY29sIG1kPSIxMiIgbGc9IjYiIHhsPSIxMiI+CiAgICAgICAgICA8Yi1jYXJkIG5vLWJvZHkgY2xhc3M9ImNhcmQtZWNvbW1lcmNlLTMgby1oaWRkZW4gbWItMzAiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXggZmxleC1jb2x1bW4gZmxleC1zbS1yb3ciPgogICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgIHNyYz0iQC9hc3NldHMvaW1hZ2VzL3Bob3RvLXdpZGUtMS5qcGciCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJjYXJkLWltZy1sZWZ0IgogICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmbGV4LWdyb3ctMSBwLTQiPgogICAgICAgICAgICAgICAgPGg1IGNsYXNzPSJtLTAiPlByb2R1Y3QgZmVhdHVyZWQ8L2g1PgogICAgICAgICAgICAgICAgPHAgY2xhc3M9Im0tMCB0ZXh0LXNtYWxsIHRleHQtbXV0ZWQiPkJ5IEFCQyBDYWZlPC9wPgogICAgICAgICAgICAgICAgPHAgY2xhc3M9Im0tMCI+JDQwIDxkZWw+JDU1PC9kZWw+PC9wPgogICAgICAgICAgICAgICAgPHAgY2xhc3M9InRleHQtbXV0ZWQgbXQtMyI+CiAgICAgICAgICAgICAgICAgIExvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0IGNvbnNlY3RldHVyLCBhZGlwaXNpY2luZyBlbGl0LgogICAgICAgICAgICAgICAgICBOZXNjaXVudCBwbGFjZWF0IGVzc2UgdGVtcG9yZSBkZWJpdGlzLgogICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYWN0aW9ucyI+CiAgICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYnRuIGJ0bi1zbSByb3VuZGVkLWNpcmNsZSBidG4taWNvbiBidG4tb3V0bGluZS1wcmltYXJ5IgogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Imljb24gaS1BZGQtQ2FydCI+PC9pPgogICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvYi1jYXJkPgogICAgICAgIDwvYi1jb2w+CiAgICAgICAgPGItY29sIG1kPSIxMiIgbGc9IjYiIHhsPSIxMiI+CiAgICAgICAgICA8Yi1jYXJkIG5vLWJvZHkgY2xhc3M9ImNhcmQtZWNvbW1lcmNlLTMgby1oaWRkZW4gbWItMzAiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXggZmxleC1jb2x1bW4gZmxleC1zbS1yb3ciPgogICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgIHNyYz0iQC9hc3NldHMvaW1hZ2VzL3Bob3RvLXdpZGUtMi5qcGciCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJjYXJkLWltZy1sZWZ0IgogICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmbGV4LWdyb3ctMSBwLTQiPgogICAgICAgICAgICAgICAgPGg1IGNsYXNzPSJtLTAiPlByb2R1Y3QgZmVhdHVyZWQ8L2g1PgogICAgICAgICAgICAgICAgPHAgY2xhc3M9Im0tMCB0ZXh0LXNtYWxsIHRleHQtbXV0ZWQiPkJ5IEFwcGxlPC9wPgogICAgICAgICAgICAgICAgPHAgY2xhc3M9Im0tMCI+JDQwIDxkZWw+JDU1PC9kZWw+PC9wPgogICAgICAgICAgICAgICAgPHAgY2xhc3M9InRleHQtbXV0ZWQgbXQtMyI+CiAgICAgICAgICAgICAgICAgIExvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0IGNvbnNlY3RldHVyLCBhZGlwaXNpY2luZyBlbGl0LgogICAgICAgICAgICAgICAgICBOZXNjaXVudCBwbGFjZWF0IGVzc2UgdGVtcG9yZSBkZWJpdGlzLgogICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYWN0aW9ucyI+CiAgICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYnRuIGJ0bi1zbSByb3VuZGVkLWNpcmNsZSBidG4taWNvbiBidG4tb3V0bGluZS1wcmltYXJ5IgogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Imljb24gaS1BZGQtQ2FydCI+PC9pPgogICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvYi1jYXJkPgogICAgICAgIDwvYi1jb2w+CiAgICAgICAgPCEtLSBhdXRob3IgcHJvZml0IC0tPgogICAgICAgIDxiLWNvbCBsZz0iMTIiIHhsPSIxMiIgbWQ9IjEyIiBjbGFzcz0iIG1iLTMwIj4KICAgICAgICAgIDxiLWNhcmQ+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtYmV0d2VlbiI+CiAgICAgICAgICAgICAgPGgzIGNsYXNzPSJ1bC13aWRnZXRfX2hlYWQtdGl0bGUiPgogICAgICAgICAgICAgICAgQXV0aG9ycyBQcm9maXQKICAgICAgICAgICAgICA8L2gzPgogICAgICAgICAgICAgIDxiLWRyb3Bkb3duCiAgICAgICAgICAgICAgICBjbGFzcz0iZC1ub25lIGQtc20tYmxvY2siCiAgICAgICAgICAgICAgICBpZD0iZHJvcGRvd24tMSIKICAgICAgICAgICAgICAgIHRleHQ9IkxhdGVzdCIKICAgICAgICAgICAgICAgIHZhcmlhbnQ9InByaW1hcnkiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGItZHJvcGRvd24taXRlbT5GaXJzdCBBY3Rpb248L2ItZHJvcGRvd24taXRlbT4KICAgICAgICAgICAgICAgIDxiLWRyb3Bkb3duLWl0ZW0+U2Vjb25kIEFjdGlvbjwvYi1kcm9wZG93bi1pdGVtPgogICAgICAgICAgICAgICAgPGItZHJvcGRvd24taXRlbT5UaGlyZCBBY3Rpb248L2ItZHJvcGRvd24taXRlbT4KICAgICAgICAgICAgICA8L2ItZHJvcGRvd24+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1bC13aWRnZXRfX2JvZHkiPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVsLXdpZGdldDEiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idWwtd2lkZ2V0X19pdGVtIHVsLXdpZGdldDRfX3VzZXJzIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idWwtd2lkZ2V0NF9faW1nIj4KICAgICAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICBzcmM9IkAvYXNzZXRzL2ltYWdlcy9mYWNlcy8xLmpwZyIKICAgICAgICAgICAgICAgICAgICAgIGlkPSJ1c2VyRHJvcGRvd24iCiAgICAgICAgICAgICAgICAgICAgICBhbHQ9IiIKICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJkcm9wZG93biIKICAgICAgICAgICAgICAgICAgICAgIGFyaWEtaGFzcG9wdXA9InRydWUiCiAgICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idWwtd2lkZ2V0Ml9faW5mbyB1bC13aWRnZXQ0X191c2Vycy1pbmZvIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIiBjbGFzcz0idWwtd2lkZ2V0Ml9fdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgQW5uYSBTdHJvbmcKICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gaHJlZj0iIyIgY2xhc3M9InVsLXdpZGdldDJfX3VzZXJuYW1lIj4KICAgICAgICAgICAgICAgICAgICAgIFZpc3VhbCBEZXNpZ25lcixHb29nbGUgSW5jCiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InVsLXdpZGdldDRfX251bWJlciB0LWZvbnQtYm9sZGVzdCB0ZXh0LXN1Y2Nlc3MiCiAgICAgICAgICAgICAgICAgICAgPis1MDA8L3NwYW4KICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idWwtd2lkZ2V0X19pdGVtIHVsLXdpZGdldDRfX3VzZXJzIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idWwtd2lkZ2V0NF9faW1nIj4KICAgICAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICBzcmM9IkAvYXNzZXRzL2ltYWdlcy9mYWNlcy8yLmpwZyIKICAgICAgICAgICAgICAgICAgICAgIGlkPSJ1c2VyRHJvcGRvd24iCiAgICAgICAgICAgICAgICAgICAgICBhbHQ9IiIKICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJkcm9wZG93biIKICAgICAgICAgICAgICAgICAgICAgIGFyaWEtaGFzcG9wdXA9InRydWUiCiAgICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idWwtd2lkZ2V0Ml9faW5mbyB1bC13aWRnZXQ0X191c2Vycy1pbmZvIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIiBjbGFzcz0idWwtd2lkZ2V0Ml9fdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgV2lsbCBTbWl0aAogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBocmVmPSIjIiBjbGFzcz0idWwtd2lkZ2V0Ml9fdXNlcm5hbWUiPgogICAgICAgICAgICAgICAgICAgICAgRGV2ZWxvcGVyCiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InVsLXdpZGdldDRfX251bWJlciB0LWZvbnQtYm9sZGVzdCB0ZXh0LWRhbmdlciIKICAgICAgICAgICAgICAgICAgICA+KzkwMDwvc3BhbgogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1bC13aWRnZXRfX2l0ZW0gdWwtd2lkZ2V0NF9fdXNlcnMiPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1bC13aWRnZXQ0X19pbWciPgogICAgICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgIHNyYz0iQC9hc3NldHMvaW1hZ2VzL2ZhY2VzLzMuanBnIgogICAgICAgICAgICAgICAgICAgICAgaWQ9InVzZXJEcm9wZG93biIKICAgICAgICAgICAgICAgICAgICAgIGFsdD0iIgogICAgICAgICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9ImRyb3Bkb3duIgogICAgICAgICAgICAgICAgICAgICAgYXJpYS1oYXNwb3B1cD0idHJ1ZSIKICAgICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1bC13aWRnZXQyX19pbmZvIHVsLXdpZGdldDRfX3VzZXJzLWluZm8iPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiIGNsYXNzPSJ1bC13aWRnZXQyX190aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICBXaWxsIFNtaXRoCiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGhyZWY9IiMiIGNsYXNzPSJ1bC13aWRnZXQyX191c2VybmFtZSI+CiAgICAgICAgICAgICAgICAgICAgICBEZXZlbG9wZXIKICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idWwtd2lkZ2V0NF9fbnVtYmVyIHQtZm9udC1ib2xkZXN0IHRleHQtcHJpbWFyeSIKICAgICAgICAgICAgICAgICAgICA+KzcwMDwvc3BhbgogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVsLXdpZGdldF9faXRlbSB1bC13aWRnZXQ0X191c2VycyI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVsLXdpZGdldDRfX2ltZyI+CiAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgc3JjPSJAL2Fzc2V0cy9pbWFnZXMvZmFjZXMvNC5qcGciCiAgICAgICAgICAgICAgICAgICAgICBpZD0idXNlckRyb3Bkb3duIgogICAgICAgICAgICAgICAgICAgICAgYWx0PSIiCiAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0iZHJvcGRvd24iCiAgICAgICAgICAgICAgICAgICAgICBhcmlhLWhhc3BvcHVwPSJ0cnVlIgogICAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVsLXdpZGdldDJfX2luZm8gdWwtd2lkZ2V0NF9fdXNlcnMtaW5mbyI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgY2xhc3M9InVsLXdpZGdldDJfX3RpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgIE1lZ2FuIEZveAogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBocmVmPSIjIiBjbGFzcz0idWwtd2lkZ2V0Ml9fdXNlcm5hbWUiPgogICAgICAgICAgICAgICAgICAgICAgVUkvVVgKICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idWwtd2lkZ2V0NF9fbnVtYmVyIHQtZm9udC1ib2xkZXN0IHRleHQtd2FybmluZyIKICAgICAgICAgICAgICAgICAgICA+KzEwMDwvc3BhbgogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVsLXdpZGdldF9faXRlbSB1bC13aWRnZXQ0X191c2VycyI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVsLXdpZGdldDRfX2ltZyI+CiAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgc3JjPSJAL2Fzc2V0cy9pbWFnZXMvZmFjZXMvMi5qcGciCiAgICAgICAgICAgICAgICAgICAgICBpZD0idXNlckRyb3Bkb3duIgogICAgICAgICAgICAgICAgICAgICAgYWx0PSIiCiAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0iZHJvcGRvd24iCiAgICAgICAgICAgICAgICAgICAgICBhcmlhLWhhc3BvcHVwPSJ0cnVlIgogICAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVsLXdpZGdldDJfX2luZm8gdWwtd2lkZ2V0NF9fdXNlcnMtaW5mbyI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgY2xhc3M9InVsLXdpZGdldDJfX3RpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgIEpob24gV2ljawogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBocmVmPSIjIiBjbGFzcz0idWwtd2lkZ2V0Ml9fdXNlcm5hbWUiPgogICAgICAgICAgICAgICAgICAgICAgRGV2ZWxvcGVyCiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InVsLXdpZGdldDRfX251bWJlciB0LWZvbnQtYm9sZGVzdCB0ZXh0LWRhbmdlciIKICAgICAgICAgICAgICAgICAgICA+KzkwMDwvc3BhbgogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2ItY2FyZD4KICAgICAgICA8L2ItY29sPgogICAgICA8L2Itcm93PgogICAgPC9iLWNvbD4KICAgIDxiLWNvbCBsZz0iMTIiIHhsPSI2IiBtZD0iMTIiPgogICAgICA8Yi1yb3c+CiAgICAgICAgPGItY29sIG1kPSIxMiI+CiAgICAgICAgICA8Yi1jYXJkIHRpdGxlPSJCYXNpYyBDb2x1bW4gY2hhcnQiIGNsYXNzPSIgbWItMzAiPgogICAgICAgICAgICA8ZGl2IGlkPSJiYXNpY0FyZWEtY2hhcnQiIHN0eWxlPSJtaW4taGVpZ2h0OiAzNjVweCI+CiAgICAgICAgICAgICAgPGFwZXhjaGFydAogICAgICAgICAgICAgICAgdHlwZT0iYmFyIgogICAgICAgICAgICAgICAgaGVpZ2h0PSIzNTAiCiAgICAgICAgICAgICAgICA6b3B0aW9ucz0iYmFzaWNDb2x1bW5DaGFydC5jaGFydE9wdGlvbnMiCiAgICAgICAgICAgICAgICA6c2VyaWVzPSJiYXNpY0NvbHVtbkNoYXJ0LnNlcmllcyIKICAgICAgICAgICAgICAvPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvYi1jYXJkPgogICAgICAgIDwvYi1jb2w+CiAgICAgICAgPCEtLSBwYXltZW50LWZvcm0gLS0+CiAgICAgICAgPGItY29sIGxnPSIxMiIgeGw9IjEyIiBjbGFzcz0iIG1iLTMwIj4KICAgICAgICAgIDxiLWNhcmQgdGl0bGU9IlBheW1lbnQgRm9ybSAjMDEiIGNsYXNzPSJoLTEwMCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InVsLXdpZGdldC1saXN0X19wYXltZW50LW1ldGhvZCBtYi0zIj4KICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICBjbGFzcz0ibXItMiIKICAgICAgICAgICAgICAgIHNyYz0iQC9hc3NldHMvaW1hZ2VzL21hc3Rlci1jYXJkLnBuZyIKICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogNTBweCIKICAgICAgICAgICAgICAgIGFsdD0iIgogICAgICAgICAgICAgICAgc3Jjc2V0PSIiCiAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICBjbGFzcz0ibXItMiIKICAgICAgICAgICAgICAgIHNyYz0iQC9hc3NldHMvaW1hZ2VzL3Zpc2EucG5nIgogICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiA1MHB4IgogICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgY2xhc3M9Im1yLTIiCiAgICAgICAgICAgICAgICBzcmM9IkAvYXNzZXRzL2ltYWdlcy9wYXlwYWwucG5nIgogICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiA1MHB4IgogICAgICAgICAgICAgIC8+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGItZm9ybT4KICAgICAgICAgICAgICA8Yi1mb3JtLWdyb3VwIGxhYmVsPSJGdWxsIE5hbWUiPgogICAgICAgICAgICAgICAgPGItaW5wdXQtZ3JvdXAgY2xhc3M9Im1iLTIgbXItc20tMiBtYi1zbS0wIj4KICAgICAgICAgICAgICAgICAgPGItaW5wdXQtZ3JvdXAtcHJlcGVuZD4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaW5wdXQtZ3JvdXAtdGV4dCIgaWQ9ImJhc2ljLWFkZG9uMSI+CiAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iaS1NYWxlLTIxIHRleHQtMTgiPjwvaT4KICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgIDwvYi1pbnB1dC1ncm91cC1wcmVwZW5kPgogICAgICAgICAgICAgICAgICA8Yi1pbnB1dAogICAgICAgICAgICAgICAgICAgIGlkPSJpbmxpbmUtZm9ybS1pbnB1dC11c2VybmFtZSIKICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iRnVsbCBOYW1lIgogICAgICAgICAgICAgICAgICA+PC9iLWlucHV0PgogICAgICAgICAgICAgICAgPC9iLWlucHV0LWdyb3VwPgogICAgICAgICAgICAgIDwvYi1mb3JtLWdyb3VwPgoKICAgICAgICAgICAgICA8Yi1mb3JtLWdyb3VwIGxhYmVsPSJDYXJkIE51bWJlciIgY2xhc3M9Im10LTQiPgogICAgICAgICAgICAgICAgPGItaW5wdXQtZ3JvdXAgY2xhc3M9Im1iLTIgbXItc20tMiBtYi1zbS0wIj4KICAgICAgICAgICAgICAgICAgPGItaW5wdXQtZ3JvdXAtcHJlcGVuZD4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaW5wdXQtZ3JvdXAtdGV4dCIgaWQ9ImJhc2ljLWFkZG9uMSI+CiAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iaS1DcmVkaXQtQ2FyZC0yIHRleHQtMTgiPjwvaT4KICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgIDwvYi1pbnB1dC1ncm91cC1wcmVwZW5kPgogICAgICAgICAgICAgICAgICA8Yi1pbnB1dAogICAgICAgICAgICAgICAgICAgIGlkPSJpbmxpbmUtZm9ybS1pbnB1dC11c2VybmFtZSIKICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iY2FyZCBudW1iZXIiCiAgICAgICAgICAgICAgICAgID48L2ItaW5wdXQ+CiAgICAgICAgICAgICAgICA8L2ItaW5wdXQtZ3JvdXA+CiAgICAgICAgICAgICAgPC9iLWZvcm0tZ3JvdXA+CgogICAgICAgICAgICAgIDxiLXJvdyBjbGFzcz0ibXQtNCI+CiAgICAgICAgICAgICAgICA8Yi1jb2wgbWQ9IjQiPgogICAgICAgICAgICAgICAgICA8Yi1mb3JtLWdyb3VwIGxhYmVsPSJFeHBpcmF0aW9uIj4KICAgICAgICAgICAgICAgICAgICA8Yi1mb3JtLXNlbGVjdAogICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IiIKICAgICAgICAgICAgICAgICAgICAgIDp2YWx1ZT0ibnVsbCIKICAgICAgICAgICAgICAgICAgICAgIDpvcHRpb25zPSJ7CiAgICAgICAgICAgICAgICAgICAgICAgICcxJzogJ0phbnVhcnknLAogICAgICAgICAgICAgICAgICAgICAgICAnMic6ICdGZWJyYXVyeScsCiAgICAgICAgICAgICAgICAgICAgICAgICczJzogJ01hcmNoJwogICAgICAgICAgICAgICAgICAgICAgfSIKICAgICAgICAgICAgICAgICAgICAgIGlkPSJpbmxpbmUtZm9ybS1jdXN0b20tc2VsZWN0LXByZWYiCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiBzbG90PSJmaXJzdCIgOnZhbHVlPSJudWxsIj5Nb250aDwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgIDwvYi1mb3JtLXNlbGVjdD4KICAgICAgICAgICAgICAgICAgPC9iLWZvcm0tZ3JvdXA+CiAgICAgICAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgICAgICAgPGItY29sIG1kPSI0Ij4KICAgICAgICAgICAgICAgICAgPGItZm9ybS1ncm91cCBzdHlsZT0ibWFyZ2luLXRvcDoyNXB4Ij4KICAgICAgICAgICAgICAgICAgICA8Yi1mb3JtLXNlbGVjdAogICAgICAgICAgICAgICAgICAgICAgOnZhbHVlPSJudWxsIgogICAgICAgICAgICAgICAgICAgICAgOm9wdGlvbnM9InsgJzEnOiAnMjAxOCcsICcyJzogJzIwMTknLCAnMyc6ICcyMDIwJyB9IgogICAgICAgICAgICAgICAgICAgICAgaWQ9ImlubGluZS1mb3JtLWN1c3RvbS1zZWxlY3QtcHJlZiIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHNsb3Q9ImZpcnN0IiA6dmFsdWU9Im51bGwiPlllYXI8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICA8L2ItZm9ybS1zZWxlY3Q+CiAgICAgICAgICAgICAgICAgIDwvYi1mb3JtLWdyb3VwPgogICAgICAgICAgICAgICAgPC9iLWNvbD4KICAgICAgICAgICAgICAgIDxiLWNvbCBtZD0iNCI+CiAgICAgICAgICAgICAgICAgIDxiLWZvcm0tZ3JvdXAgbGFiZWw9IkNWViI+CiAgICAgICAgICAgICAgICAgICAgPGItZm9ybS1pbnB1dD4gPC9iLWZvcm0taW5wdXQ+CiAgICAgICAgICAgICAgICAgIDwvYi1mb3JtLWdyb3VwPgogICAgICAgICAgICAgICAgPC9iLWNvbD4KICAgICAgICAgICAgICA8L2Itcm93PgogICAgICAgICAgICAgIDxiLWJ1dHRvbiBibG9jayB2YXJpYW50PSJwcmltYXJ5IG10LTQiPkNvbmZpcm08L2ItYnV0dG9uPgogICAgICAgICAgICA8L2ItZm9ybT4KICAgICAgICAgIDwvYi1jYXJkPgogICAgICAgIDwvYi1jb2w+CiAgICAgICAgPGItY29sIG1kPSIxMiIgbGc9IjYiIHhsPSIxMiI+CiAgICAgICAgICA8Yi1jYXJkIGNsYXNzPSIgbWItMzAiPgogICAgICAgICAgICA8aDYgY2xhc3M9Im1iLTIiPkxhc3QgNyBkYXlzIHRyYWZmaWMgc3RhdHVzPC9oNj4KICAgICAgICAgICAgPHAgY2xhc3M9InRleHQtMjQgZm9udC13ZWlnaHQtbGlnaHQgbWItMSI+CiAgICAgICAgICAgICAgPGkgY2xhc3M9ImktVXAgdGV4dC1zdWNjZXNzIj48L2k+IDE1JQogICAgICAgICAgICA8L3A+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjaGFydC13cmFwcGVyIiBzdHlsZT0iaGVpZ2h0OiA2MHB4Ij4KICAgICAgICAgICAgICA8di1jaGFydCA6b3B0aW9ucz0iZWNoYXJ0MyIgOmF1dG9yZXNpemU9InRydWUiPjwvdi1jaGFydD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2ItY2FyZD4KICAgICAgICA8L2ItY29sPgogICAgICAgIDxiLWNvbCBtZD0iMTIiIGxnPSI2IiB4bD0iMTIiPgogICAgICAgICAgPGItY2FyZCBjbGFzcz0iIG1iLTMwIj4KICAgICAgICAgICAgPGg2IGNsYXNzPSJtYi0yIj5TZXJ2ZXIgZmFpbHVyZXM8L2g2PgogICAgICAgICAgICA8cCBjbGFzcz0idGV4dC0yNCBmb250LXdlaWdodC1saWdodCBtYi0xIj4KICAgICAgICAgICAgICA8aSBjbGFzcz0iaS1Eb3duIHRleHQtZGFuZ2VyIj48L2k+IDUlCiAgICAgICAgICAgIDwvcD4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNoYXJ0LXdyYXBwZXIiIHN0eWxlPSJoZWlnaHQ6IDYwcHgiPgogICAgICAgICAgICAgIDx2LWNoYXJ0IDpvcHRpb25zPSJlY2hhcnQ0IiA6YXV0b3Jlc2l6ZT0idHJ1ZSI+PC92LWNoYXJ0PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvYi1jYXJkPgogICAgICAgIDwvYi1jb2w+CgogICAgICAgIDxiLWNvbCB4bD0iMTIiIGxnPSIxMiIgY2xhc3M9IiBtYi0zMCI+CiAgICAgICAgICA8Yi1jYXJkCiAgICAgICAgICAgIGJvcmRlci12YXJpYW50PSIiCiAgICAgICAgICAgIHRpdGxlPSJEZXZlbG9wZXJzIgogICAgICAgICAgICBoZWFkZXItYmctdmFyaWFudD0iIgogICAgICAgICAgICBoZWFkZXItdGV4dC12YXJpYW50PSIiCiAgICAgICAgICAgIGFsaWduPSJsZWZ0IgogICAgICAgICAgPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1bC13aWRnZXQ1Ij4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1bC13aWRnZXQtczVfX2l0ZW0gbWItMzAiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idWwtd2lkZ2V0LXM1X19jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idWwtd2lkZ2V0LXM1X19waWMiPgogICAgICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgIHNyYz0iQC9hc3NldHMvaW1hZ2VzL2ZhY2VzLzEuanBnIgogICAgICAgICAgICAgICAgICAgICAgaWQ9InVzZXJEcm9wZG93biIKICAgICAgICAgICAgICAgICAgICAgIGFsdD0iIgogICAgICAgICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9ImRyb3Bkb3duIgogICAgICAgICAgICAgICAgICAgICAgYXJpYS1oYXNwb3B1cD0idHJ1ZSIKICAgICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1bC13aWRnZXQtczVfX3NlY3Rpb24gdGV4dC1sZWZ0Ij4KICAgICAgICAgICAgICAgICAgICA8aDU+CiAgICAgICAgICAgICAgICAgICAgICBMb2dvIERlc2lnbgogICAgICAgICAgICAgICAgICAgIDwvaDU+CiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InVsLXdpZGdldC1zNV9fZGVzYyB0ZXh0LWxlZnQiPgogICAgICAgICAgICAgICAgICAgICAgVUkgTEliIGFkbWluIC4KICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1bC13aWRnZXQtczVfX2NvbnRlbnQiPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1bC13aWRnZXQtczVfX3Byb2dyZXNzIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1bC13aWRnZXQtczVfX3N0YXRzIj4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkxvbmRvbjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8Yi1wcm9ncmVzcwogICAgICAgICAgICAgICAgICAgICAgOnZhbHVlPSIyNSIKICAgICAgICAgICAgICAgICAgICAgIHNob3ctdmFsdWUKICAgICAgICAgICAgICAgICAgICAgIHZhcmlhbnQ9InByaW1hcnkiCiAgICAgICAgICAgICAgICAgICAgICBzdHJpcGVkCiAgICAgICAgICAgICAgICAgICAgICBhbmltYXRlZAogICAgICAgICAgICAgICAgICAgID48L2ItcHJvZ3Jlc3M+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1bC13aWRnZXQtczVfX2NvbnRlbnQiPgogICAgICAgICAgICAgICAgICA8Yi1idXR0b24gdmFyaWFudD0ib3V0bGluZS1wcmltYXJ5Ij4KICAgICAgICAgICAgICAgICAgICBGb2xsb3cKICAgICAgICAgICAgICAgICAgPC9iLWJ1dHRvbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVsLXdpZGdldC1zNV9faXRlbSBtYi0zMCI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1bC13aWRnZXQtczVfX2NvbnRlbnQiPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1bC13aWRnZXQtczVfX3BpYyI+CiAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgc3JjPSJAL2Fzc2V0cy9pbWFnZXMvZmFjZXMvMi5qcGciCiAgICAgICAgICAgICAgICAgICAgICBpZD0idXNlckRyb3Bkb3duIgogICAgICAgICAgICAgICAgICAgICAgYWx0PSIiCiAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0iZHJvcGRvd24iCiAgICAgICAgICAgICAgICAgICAgICBhcmlhLWhhc3BvcHVwPSJ0cnVlIgogICAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVsLXdpZGdldC1zNV9fc2VjdGlvbiB0ZXh0LWxlZnQiPgogICAgICAgICAgICAgICAgICAgIDxoNT4KICAgICAgICAgICAgICAgICAgICAgIExvZ28gRGVzaWduCiAgICAgICAgICAgICAgICAgICAgPC9oNT4KICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0idWwtd2lkZ2V0LXM1X19kZXNjIHRleHQtbGVmdCI+CiAgICAgICAgICAgICAgICAgICAgICBVSSBMSWIgYWRtaW4gLgogICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVsLXdpZGdldC1zNV9fY29udGVudCI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVsLXdpZGdldC1zNV9fcHJvZ3Jlc3MiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVsLXdpZGdldC1zNV9fc3RhdHMiPgogICAgICAgICAgICAgICAgICAgICAgPHNwYW4+R2VybWFueTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8Yi1wcm9ncmVzcwogICAgICAgICAgICAgICAgICAgICAgOnZhbHVlPSIzNSIKICAgICAgICAgICAgICAgICAgICAgIHNob3ctdmFsdWUKICAgICAgICAgICAgICAgICAgICAgIHZhcmlhbnQ9ImRhbmdlciIKICAgICAgICAgICAgICAgICAgICAgIHN0cmlwZWQKICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGVkCiAgICAgICAgICAgICAgICAgICAgPjwvYi1wcm9ncmVzcz4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVsLXdpZGdldC1zNV9fY29udGVudCI+CiAgICAgICAgICAgICAgICAgIDxiLWJ1dHRvbiB2YXJpYW50PSJvdXRsaW5lLXByaW1hcnkiPgogICAgICAgICAgICAgICAgICAgIEZvbGxvdwogICAgICAgICAgICAgICAgICA8L2ItYnV0dG9uPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idWwtd2lkZ2V0LXM1X19pdGVtIG1iLTMwIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVsLXdpZGdldC1zNV9fY29udGVudCI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVsLXdpZGdldC1zNV9fcGljIj4KICAgICAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICBzcmM9IkAvYXNzZXRzL2ltYWdlcy9mYWNlcy8zLmpwZyIKICAgICAgICAgICAgICAgICAgICAgIGlkPSJ1c2VyRHJvcGRvd24iCiAgICAgICAgICAgICAgICAgICAgICBhbHQ9IiIKICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJkcm9wZG93biIKICAgICAgICAgICAgICAgICAgICAgIGFyaWEtaGFzcG9wdXA9InRydWUiCiAgICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idWwtd2lkZ2V0LXM1X19zZWN0aW9uIHRleHQtbGVmdCI+CiAgICAgICAgICAgICAgICAgICAgPGg1PgogICAgICAgICAgICAgICAgICAgICAgIExvZ28gRGVzaWduCiAgICAgICAgICAgICAgICAgICAgPC9oNT4KICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0idWwtd2lkZ2V0LXM1X19kZXNjIHRleHQtbGVmdCI+CiAgICAgICAgICAgICAgICAgICAgICBVSSBMSWIgYWRtaW4gLgogICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVsLXdpZGdldC1zNV9fY29udGVudCI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVsLXdpZGdldC1zNV9fcHJvZ3Jlc3MiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVsLXdpZGdldC1zNV9fc3RhdHMiPgogICAgICAgICAgICAgICAgICAgICAgPHNwYW4+RmlubGFuZDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8Yi1wcm9ncmVzcwogICAgICAgICAgICAgICAgICAgICAgOnZhbHVlPSIzMCIKICAgICAgICAgICAgICAgICAgICAgIHNob3ctdmFsdWUKICAgICAgICAgICAgICAgICAgICAgIHZhcmlhbnQ9ImluZm8iCiAgICAgICAgICAgICAgICAgICAgICBzdHJpcGVkCiAgICAgICAgICAgICAgICAgICAgICBhbmltYXRlZAogICAgICAgICAgICAgICAgICAgID48L2ItcHJvZ3Jlc3M+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1bC13aWRnZXQtczVfX2NvbnRlbnQiPgogICAgICAgICAgICAgICAgICA8Yi1idXR0b24gdmFyaWFudD0ib3V0bGluZS1wcmltYXJ5Ij4KICAgICAgICAgICAgICAgICAgICBGb2xsb3cKICAgICAgICAgICAgICAgICAgPC9iLWJ1dHRvbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvYi1jYXJkPgogICAgICAgIDwvYi1jb2w+CiAgICAgIDwvYi1yb3c+CiAgICA8L2ItY29sPgogIDwvYi1yb3c+CjwvZGl2Pgo="},null]}