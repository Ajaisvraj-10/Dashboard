{"remainingRequest":"/Users/muhammed/Documents/vue_projects/ott-frontent/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/muhammed/Documents/vue_projects/ott-frontent/src/views/app/videopage/edit.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/muhammed/Documents/vue_projects/ott-frontent/src/views/app/videopage/edit.vue","mtime":1684132664000},{"path":"/Users/muhammed/Documents/vue_projects/ott-frontent/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/muhammed/Documents/vue_projects/ott-frontent/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/muhammed/Documents/vue_projects/ott-frontent/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/muhammed/Documents/vue_projects/ott-frontent/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/muhammed/Documents/vue_projects/ott-frontent/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KDQppbXBvcnQgU2lnbkluUGFnZSBmcm9tICcvc3JjL3ZpZXdzL2FwcC92aWRlb3BhZ2Uvc2lnbi1pbicNCmltcG9ydCBIb21lUGFnZSBmcm9tICcvc3JjL3ZpZXdzL2FwcC92aWRlb3BhZ2UvaG9tZScNCmltcG9ydCBQbGFuUGFnZSBmcm9tICcvc3JjL3ZpZXdzL2FwcC92aWRlb3BhZ2UvcGxhbicNCmltcG9ydCBWaWRlb3NQYWdlIGZyb20gJy9zcmMvdmlld3MvYXBwL3ZpZGVvcGFnZS9tb3ZpZXMnDQppbXBvcnQgV2F0Y2hpbmdQYWdlIGZyb20gJy9zcmMvdmlld3MvYXBwL3ZpZGVvcGFnZS92aWRlbycNCmV4cG9ydCBkZWZhdWx0IHsNCiAgY29tcG9uZW50czogew0KICAgIFNpZ25JblBhZ2UsDQogICAgSG9tZVBhZ2UsDQogICAgUGxhblBhZ2UsDQogICAgVmlkZW9zUGFnZSwNCiAgICBXYXRjaGluZ1BhZ2UsDQogIH0sDQogIGRhdGEoKSB7DQogICAgcmV0dXJuIHsNCiAgICAgIHBhZ2VfaWQ6bnVsbCwNCiAgICAgIGN1cnJlbnRfcGFnZTp7c2x1ZzonJ30sDQogICAgICBibG9ja3M6W10sDQogICAgICBjdXJyZW50X2Jsb2NrOntzcGVjczpbXSwgbGFuZ3VhZ2VzOltdLCBjYXRlZ29yaWVzOltdLCBtb3ZpZXM6W119LA0KICAgICAgc3BlY3M6W10sDQogICAgICBzcGVjc19pZHM6W10sDQogICAgICBjYXRlZ29yaWVzOltdLA0KICAgICAgbGFuZ3VhZ2VzOltdLA0KICAgICAgdGhlbWVuYW1lOicnLA0KICAgIH07DQogIH0sDQogIG1vdW50ZWQoKXsNCiAgICB0aGlzLnRoZW1lbmFtZSA9IHRoZW1lX25hbWUNCiAgICB0aGlzLnBhZ2VfaWQgPSB0aGlzLiRyb3V0ZS5wYXJhbXMucGFnZQ0KICAgIHRoaXMuZ2V0Q3VycmVudFBhZ2UoKQ0KICB9LA0KICBtZXRob2RzOnsNCiAgICBnZXRDdXJyZW50UGFnZSgpIHsNCiAgICAgIHZhciBoZWFkZXJzID0gbmV3IEhlYWRlcnMoKTsNCiAgICAgIGhlYWRlcnMuYXBwZW5kKCJBdXRob3JpemF0aW9uIiwgIlRva2VuICIrdGhpcy4kcm9vdC50b2tlbik7DQogICAgICBmZXRjaCh0aGlzLmFwaV91cmwrJy9jb250ZW50L3BhZ2VzLycrdGhpcy5wYWdlX2lkKycvJywgew0KICAgICAgICAgIG1ldGhvZCA6ICdnZXQnLA0KICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsDQogICAgICB9KQ0KICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7DQogICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKQ0KICAgICAgfSkNCiAgICAgIC50aGVuKChqc29uRGF0YSkgPT4gew0KICAgICAgICB0aGlzLmN1cnJlbnRfcGFnZSA9IGpzb25EYXRhDQogICAgICAgIHRoaXMuYmxvY2tzID0ganNvbkRhdGEuYmxvY2tzDQogICAgICAgIGZvcih2YXIgaT0wO2k8dGhpcy5ibG9ja3MubGVuZ3RoO2krKyl7DQogICAgICAgICAgaWYodGhpcy5ibG9ja3NbaV0ubW92aWVfdHlwZSE9J05vbmUnKXsNCiAgICAgICAgICAgIHRoaXMuYmxvY2tzW2ldLm1vdmllcyA9IHRoaXMucGFnaW5hdGlvbk1vdmllcyh0aGlzLmJsb2Nrc1tpXS5tb3ZpZXMsNikNCiAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgIH0pDQogICAgfSwNCiAgICBlZGl0Q29udGVudChibG9jayl7DQogICAgICB2YXIgc2VsZj10aGlzDQogICAgICB0aGlzLmN1cnJlbnRfYmxvY2sgPSBibG9jaw0KICAgICAgdGhpcy5ibG9ja3MuZm9yRWFjaChmdW5jdGlvbihibGspew0KICAgICAgICBibGsuaXNfZWRpdCA9IGZhbHNlDQogICAgICAgIGlmKGJsay5pZCA9PSBibG9jay5pZCl7DQogICAgICAgICAgaWYoYmxrLm1vdmllX3R5cGUgPT0gJ0xhbmd1YWdlJylzZWxmLmdldExhbmd1YWdlcygpOw0KICAgICAgICAgIGlmKGJsay5tb3ZpZV90eXBlID09ICdDYXRlZ29yeScpc2VsZi5nZXRDYXRlZ29yaWVzKCk7DQogICAgICAgICAgaWYoYmxrLm1vdmllX3R5cGUgPT0gJ01ldGEgVGFncycpc2VsZi5nZXRTcGVjcygpOw0KICAgICAgICB9DQogICAgICB9KQ0KICAgICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdibG9ja3NfJytibG9jay5pZCk7DQogICAgICBpZihlbGVtZW50KXsNCiAgICAgICAgZWxlbWVudC5zY3JvbGxJbnRvVmlldyh7IGJlaGF2aW9yOiAic21vb3RoIiwgYmxvY2s6ICdlbmQnIH0pOw0KICAgICAgfQ0KICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpew0KICAgICAgICBibG9jay5pc19lZGl0ID0gdHJ1ZQ0KICAgICAgfSw1MCkNCg0KICAgIH0sDQogICAgc2VsZWN0ZWRDb250ZW50KGNvbnRlbnQpew0KICAgICAgdGhpcy5lZGl0Q29udGVudChjb250ZW50KQ0KICAgIH0sDQogICAgc2VsZWN0RmlsZShlLGJsb2NrKSB7DQogICAgICBibG9jay5pc19lZGl0PXRydWUNCiAgICAgIGJsb2NrLnZhbHVlPXRydWUNCiAgICAgIHZhciBpbWdfZmlsZSA9IGUudGFyZ2V0LmZpbGVzWzBdOw0KICAgICAgaWYoaW1nX2ZpbGUpew0KICAgICAgICBibG9jay5pbWFnZSA9ICcnDQogICAgICAgIHZhciBzZWxmPXRoaXMNCiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpew0KICAgICAgICAgIGJsb2NrLmltYWdlID0gVVJMLmNyZWF0ZU9iamVjdFVSTChpbWdfZmlsZSk7DQogICAgICAgIH0sMTApDQogICAgICB9DQogICAgfSwNCiAgICBjaGFuZ2VNb3ZpZVR5cGUoKXsNCiAgICAgIGlmKHRoaXMuY3VycmVudF9ibG9jay5tb3ZpZV90eXBlID09ICdMYW5ndWFnZScpew0KICAgICAgICB0aGlzLmdldExhbmd1YWdlcygpDQogICAgICB9DQogICAgICBlbHNlIGlmKHRoaXMuY3VycmVudF9ibG9jay5tb3ZpZV90eXBlID09ICdDYXRlZ29yeScpew0KICAgICAgICB0aGlzLmdldENhdGVnb3JpZXMoKQ0KICAgICAgfQ0KICAgICAgZWxzZSBpZih0aGlzLmN1cnJlbnRfYmxvY2subW92aWVfdHlwZSA9PSAnTWV0YSBUYWdzJyl7DQogICAgICAgIHRoaXMuZ2V0U3BlY3MoKQ0KICAgICAgfQ0KICAgIH0sDQogICAgZ2V0U3BlY3MoKSB7DQogICAgICB2YXIgaGVhZGVycyA9IG5ldyBIZWFkZXJzKCk7DQogICAgICBoZWFkZXJzLmFwcGVuZCgiQXV0aG9yaXphdGlvbiIsICJUb2tlbiAiK3RoaXMuJHJvb3QudG9rZW4pOw0KICAgICAgZmV0Y2godGhpcy5hcGlfdXJsKycvbW92aWVzL3NwZWNzLycsIHsNCiAgICAgICAgICBtZXRob2QgOiAnZ2V0JywNCiAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLA0KICAgICAgfSkNCiAgICAgIC50aGVuKChyZXNwb25zZSkgPT4gew0KICAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCkNCiAgICAgIH0pDQogICAgICAudGhlbigoanNvbkRhdGEpID0+IHsNCiAgICAgICAgdGhpcy5zcGVjcyA9IGpzb25EYXRhDQogICAgICAgIHRoaXMuc3BlY3NfaWRzID0gW10NCiAgICAgICAgaWYodGhpcy5jdXJyZW50X2Jsb2NrLmlkKXsNCiAgICAgICAgICBmb3IodmFyIGk9MDtpPHRoaXMuY3VycmVudF9ibG9jay5tZXRhX3RhZ3MubGVuZ3RoO2krKyl7DQogICAgICAgICAgICB0aGlzLnNwZWNzX2lkcy5wdXNoKHRoaXMuY3VycmVudF9ibG9jay5tZXRhX3RhZ3NbaV0uc3BlYykNCiAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgIH0pDQogICAgfSwNCiAgICBhZGRTcGVjKHNwZWMsa2V5KXsNCiAgICAgIHRoaXMuc3BlY3NfaWRzLnB1c2goc3BlYy5pZCkNCiAgICB9LA0KICAgIGdldENhdGVnb3JpZXMoKSB7DQogICAgICB2YXIgaGVhZGVycyA9IG5ldyBIZWFkZXJzKCk7DQogICAgICBoZWFkZXJzLmFwcGVuZCgiQXV0aG9yaXphdGlvbiIsICJUb2tlbiAiK3RoaXMuJHJvb3QudG9rZW4pOw0KICAgICAgZmV0Y2godGhpcy5hcGlfdXJsKycvbW92aWVzL2NhdGVnb3JpZXMvJywgew0KICAgICAgICAgIG1ldGhvZCA6ICdnZXQnLA0KICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsDQogICAgICB9KQ0KICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7DQogICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKQ0KICAgICAgfSkNCiAgICAgIC50aGVuKChqc29uRGF0YSkgPT4gew0KICAgICAgICB0aGlzLmNhdGVnb3JpZXMgPSBqc29uRGF0YQ0KICAgICAgfSkNCiAgICB9LA0KICAgIGdldExhbmd1YWdlcygpIHsNCiAgICAgIHZhciBoZWFkZXJzID0gbmV3IEhlYWRlcnMoKTsNCiAgICAgIGhlYWRlcnMuYXBwZW5kKCJBdXRob3JpemF0aW9uIiwgIlRva2VuICIrdGhpcy4kcm9vdC50b2tlbik7DQogICAgICBmZXRjaCh0aGlzLmFwaV91cmwrJy9tb3ZpZXMvbGFuZ3VhZ2VzLycsIHsNCiAgICAgICAgICBtZXRob2QgOiAnZ2V0JywNCiAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLA0KICAgICAgfSkNCiAgICAgIC50aGVuKChyZXNwb25zZSkgPT4gew0KICAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCkNCiAgICAgIH0pDQogICAgICAudGhlbigoanNvbkRhdGEpID0+IHsNCiAgICAgICAgdGhpcy5sYW5ndWFnZXMgPSBqc29uRGF0YQ0KICAgICAgfSkNCiAgICB9LA0KICAgIGdldE1vdmllcyhmaWx0ZXI9JycpIHsNCiAgICAgIGlmKGZpbHRlciE9Jycpew0KICAgICAgICBpZih0aGlzLm1vdmllLnR5cGUhPSdTZWxlY3QgVHlwZScgJiYgdGhpcy5jdXJyZW50X2NhdGVnb3J5LmlkKXsNCiAgICAgICAgICB0aGlzLmZpbHRlcl9tb3ZpZXMgPSBbXQ0KICAgICAgICAgIGZpbHRlciA9ICc/Y2F0ZWdvcnk9Jyt0aGlzLmN1cnJlbnRfY2F0ZWdvcnkuaWQrJyZ0eXBlPScrdGhpcy5tb3ZpZS50eXBlDQogICAgICAgIH1lbHNlew0KICAgICAgICAgIHJldHVybiBmYWxzZQ0KICAgICAgICB9DQogICAgICB9DQogICAgICB2YXIgaGVhZGVycyA9IG5ldyBIZWFkZXJzKCk7DQogICAgICBoZWFkZXJzLmFwcGVuZCgiQXV0aG9yaXphdGlvbiIsICJUb2tlbiAiK3RoaXMuJHJvb3QudG9rZW4pOw0KICAgICAgZmV0Y2godGhpcy5hcGlfdXJsKycvbW92aWVzL21vdmllcy8nK2ZpbHRlciwgew0KICAgICAgICAgIG1ldGhvZCA6ICdnZXQnLA0KICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsDQogICAgICB9KQ0KICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7DQogICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKQ0KICAgICAgfSkNCiAgICAgIC50aGVuKChqc29uRGF0YSkgPT4gew0KICAgICAgICB0aGlzLmN1cnJlbnRfYmxvY2subW92aWVzID0ganNvbkRhdGENCiAgICAgIH0pDQogICAgfSwNCiAgICB1cGRhdGVCbG9jaygpIHsNCiAgICAgIHRoaXMuY3VycmVudF9ibG9jay5pc19lZGl0ID0gZmFsc2UNCiAgICAgIHZhciBmb3JtZGF0YSA9IG5ldyBGb3JtRGF0YShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYmxvY2tGb3JtJykpDQogICAgICBmb3JtZGF0YS5hcHBlbmQoJ25hbWUnLHRoaXMuY3VycmVudF9ibG9jay5uYW1lKQ0KICAgICAgZm9ybWRhdGEuYXBwZW5kKCdwYWdlJyx0aGlzLmN1cnJlbnRfYmxvY2sucGFnZSkNCiAgICAgIHZhciBoZWFkZXJzID0gbmV3IEhlYWRlcnMoKTsNCiAgICAgIGhlYWRlcnMuYXBwZW5kKCJBdXRob3JpemF0aW9uIiwgIlRva2VuICIrdGhpcy4kcm9vdC50b2tlbik7DQogICAgICBmZXRjaCh0aGlzLmFwaV91cmwrJy9jb250ZW50L2Jsb2Nrcy8nK3RoaXMuY3VycmVudF9ibG9jay5pZCsnLycsIHsNCiAgICAgICAgICBtZXRob2QgOiAnUFVUJywNCiAgICAgICAgICBib2R5IDogZm9ybWRhdGEsDQogICAgICAgICAgaGVhZGVyczogaGVhZGVycywNCiAgICAgIH0pDQogICAgICAudGhlbigocmVzcG9uc2UpID0+IHsNCiAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpDQogICAgICB9KQ0KICAgICAgLnRoZW4oKGpzb25EYXRhKSA9PiB7DQogICAgICAgIGlmKGpzb25EYXRhLmlkKXsNCiAgICAgICAgICB0aGlzLmN1cnJlbnRfYmxvY2sgPSB7c3BlY3M6W10sIGxhbmd1YWdlczpbXSwgY2F0ZWdvcmllczpbXSwgbW92aWVzOltdfQ0KICAgICAgICAgIHRoaXMuZ2V0Q3VycmVudFBhZ2UoKQ0KICAgICAgICB9DQogICAgICB9KQ0KICAgIH0sDQogIH0NCiANCg0KfTsNCg=="},null]}