{"remainingRequest":"E:\\vue_projects\\biowin\\node_modules\\thread-loader\\dist\\cjs.js!E:\\vue_projects\\biowin\\node_modules\\babel-loader\\lib\\index.js!E:\\vue_projects\\biowin\\node_modules\\vuetify-loader\\lib\\loader.js??ref--17-0!E:\\vue_projects\\biowin\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\vue_projects\\biowin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\vue_projects\\biowin\\src\\views\\app\\oodo\\production\\sun-dried-form.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\vue_projects\\biowin\\src\\views\\app\\oodo\\production\\sun-dried-form.vue","mtime":1670691578157},{"path":"E:\\vue_projects\\biowin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\vue_projects\\biowin\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\vue_projects\\biowin\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\vue_projects\\biowin\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1574476662000},{"path":"E:\\vue_projects\\biowin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\vue_projects\\biowin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}