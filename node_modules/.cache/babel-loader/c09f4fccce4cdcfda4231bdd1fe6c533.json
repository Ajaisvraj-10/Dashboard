{"remainingRequest":"/Users/muhammed/Documents/vue_projects/backend/biowin aeo/node_modules/thread-loader/dist/cjs.js!/Users/muhammed/Documents/vue_projects/backend/biowin aeo/node_modules/babel-loader/lib/index.js!/Users/muhammed/Documents/vue_projects/backend/biowin aeo/node_modules/vuetify-loader/lib/loader.js??ref--17-0!/Users/muhammed/Documents/vue_projects/backend/biowin aeo/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/muhammed/Documents/vue_projects/backend/biowin aeo/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/muhammed/Documents/vue_projects/backend/biowin aeo/src/views/app/pages/document-form.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/muhammed/Documents/vue_projects/backend/biowin aeo/src/views/app/pages/document-form.vue","mtime":1673373648000},{"path":"/Users/muhammed/Documents/vue_projects/backend/biowin aeo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/muhammed/Documents/vue_projects/backend/biowin aeo/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/muhammed/Documents/vue_projects/backend/biowin aeo/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/muhammed/Documents/vue_projects/backend/biowin aeo/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Users/muhammed/Documents/vue_projects/backend/biowin aeo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/muhammed/Documents/vue_projects/backend/biowin aeo/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}