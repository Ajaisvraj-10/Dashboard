{"remainingRequest":"/Users/muhammed/Documents/vue_projects/ott-frontent/node_modules/thread-loader/dist/cjs.js!/Users/muhammed/Documents/vue_projects/ott-frontent/node_modules/babel-loader/lib/index.js!/Users/muhammed/Documents/vue_projects/ott-frontent/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/muhammed/Documents/vue_projects/ott-frontent/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/muhammed/Documents/vue_projects/ott-frontent/src/views/app/m1/video.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/muhammed/Documents/vue_projects/ott-frontent/src/views/app/m1/video.vue","mtime":1690226384696},{"path":"/Users/muhammed/Documents/vue_projects/ott-frontent/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/muhammed/Documents/vue_projects/ott-frontent/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/muhammed/Documents/vue_projects/ott-frontent/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/muhammed/Documents/vue_projects/ott-frontent/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/muhammed/Documents/vue_projects/ott-frontent/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}