{"remainingRequest":"E:\\vue_projects\\biowin\\node_modules\\thread-loader\\dist\\cjs.js!E:\\vue_projects\\biowin\\node_modules\\babel-loader\\lib\\index.js!E:\\vue_projects\\biowin\\node_modules\\vuetify-loader\\lib\\loader.js??ref--17-0!E:\\vue_projects\\biowin\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\vue_projects\\biowin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\vue_projects\\biowin\\src\\views\\app\\oodo\\procurement\\normal-procurement-form.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\vue_projects\\biowin\\src\\views\\app\\oodo\\procurement\\normal-procurement-form.vue","mtime":1670086797016},{"path":"E:\\vue_projects\\biowin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\vue_projects\\biowin\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\vue_projects\\biowin\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\vue_projects\\biowin\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1574476662000},{"path":"E:\\vue_projects\\biowin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\vue_projects\\biowin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pbmNsdWRlcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNwbGljZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaCI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCmltcG9ydCBQcm9kdWN0RmllbGRzIGZyb20gJy9zcmMvdmlld3MvYXBwL29vZG8vY29tcG9uZW50cy9wcm9kdWN0X2ZpZWxkcyc7CmV4cG9ydCBkZWZhdWx0IHsKICBtZXRhSW5mbzogewogICAgdGl0bGU6ICJGUE8gLSBJQ1MiCiAgfSwKICBjb21wb25lbnRzOiB7CiAgICBQcm9kdWN0RmllbGRzOiBQcm9kdWN0RmllbGRzCiAgfSwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgZm9ybV9kYXRhOiB7CiAgICAgICAgcHVyY2hhc2VfdHlwZTogMSwKICAgICAgICBjcmVhdGVkX29uOiBuZXcgRGF0ZSgpLAogICAgICAgIHNhbXBsZV9wcm9jdXJlbWVudDogbnVsbCwKICAgICAgICBzdGF0dXM6ICdDb2xsZWN0aW5nJywKICAgICAgICB0b3RhbF9mYXJtZXJzOiAwCiAgICAgIH0sCiAgICAgIGlkOiBudWxsLAogICAgICBsb2FkX3Byb2R1Y3RzOiBmYWxzZSwKICAgICAgbGluZXM6IFtdLAogICAgICBwcm9kdWN0X2lkOiBudWxsLAogICAgICBhY3Rpb246ICdjcmVhdGUnLAogICAgICB2ZWhpY2xlczogW10sCiAgICAgIHNhbXBsZXM6IFtdLAogICAgICBwYW5jaGF5YXRoczogW10sCiAgICAgIHZmY3M6IFtdLAogICAgICBmYXJtZXJzOiBbXSwKICAgICAgdG90YWxfa2V5czogMAogICAgfTsKICB9LAogIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7CiAgICB0aGlzLiRyb290LmN1cnJlbnRfc2VjdGlvbiA9ICdwcm9jdXJlbWVudCc7CiAgICB0aGlzLmFjdGlvbiA9IHRoaXMuJHJvdXRlLnBhcmFtcy5hY3Rpb247CiAgICB0aGlzLmdldFB1cmNoYXNlVHlwZXMoKTsKICAgIHRoaXMuZ2V0VmVoaWNsZXMoKTsKCiAgICBpZiAodGhpcy5hY3Rpb24gPT0gJ2VkaXQnKSB7CiAgICAgIHRoaXMuaWQgPSB0aGlzLiRyb3V0ZS5wYXJhbXMuaWQ7CiAgICAgIHRoaXMuZ2V0Rm9ybSgpOwogICAgfSBlbHNlIHsKICAgICAgdGhpcy5sb2FkX3Byb2R1Y3RzID0gdHJ1ZTsKICAgIH0KICB9LAogIHdhdGNoOiB7CiAgICAnJHJvdXRlJzogJ2NoYW5nZVVSTCcKICB9LAogIG1ldGhvZHM6IHsKICAgIGNoYW5nZVVSTDogZnVuY3Rpb24gY2hhbmdlVVJMKCkgewogICAgICB0aGlzLmFjdGlvbiA9IHRoaXMuJHJvdXRlLnBhcmFtcy5hY3Rpb247CiAgICAgIHRoaXMuZ2V0UHVyY2hhc2VUeXBlcygpOwogICAgICB0aGlzLmdldFZlaGljbGVzKCk7CgogICAgICBpZiAodGhpcy5hY3Rpb24gPT0gJ2VkaXQnKSB7CiAgICAgICAgdGhpcy5pZCA9IHRoaXMuJHJvdXRlLnBhcmFtcy5pZDsKICAgICAgICB0aGlzLmdldEZvcm0oKTsKICAgICAgfQogICAgfSwKICAgIGxpbmVPcGVyYXRpb246IGZ1bmN0aW9uIGxpbmVPcGVyYXRpb24ob3BlcmF0aW9uKSB7CiAgICAgIGlmIChvcGVyYXRpb24gPT0gJysnKSB7CiAgICAgICAgdGhpcy5saW5lcy5wdXNoKHsKICAgICAgICAgICdlc3RpbWF0ZV9xdHknOiAwLAogICAgICAgICAgJ2VzdGltYXRlX3F0eV9iYWxhbmNlJzogMCwKICAgICAgICAgICdmYXJtZXInOiBudWxsLAogICAgICAgICAgJ2Zhcm1lcl9kZXRhaWwnOiB7CiAgICAgICAgICAgICduYW1lJzogJycsCiAgICAgICAgICAgICdmYXJtZXJfY29kZSc6ICcnCiAgICAgICAgICB9LAogICAgICAgICAgJ3ZmYyc6IG51bGwsCiAgICAgICAgICAncHJvY3VyZV9xdHknOiAwLAogICAgICAgICAgJ3FjX3N0YXR1cyc6ICdXYWl0aW5nJywKICAgICAgICAgICdmYXJtZXJzX2xpc3QnOiBbXQogICAgICAgIH0pOwogICAgICAgIHRoaXMudG90YWxfa2V5cysrOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMubGluZXMuc3BsaWNlKG9wZXJhdGlvbiwgMSk7CiAgICAgICAgdGhpcy50b3RhbF9rZXlzLS07CiAgICAgIH0KCiAgICAgIHRoaXMuY2FsY3VsdGlvbigpOwogICAgfSwKICAgIGNhbGN1bHRpb246IGZ1bmN0aW9uIGNhbGN1bHRpb24oKSB7CiAgICAgIHZhciBzZWxmID0gdGhpczsKICAgICAgdmFyIHRvdGFsX2Zhcm1lcnMgPSBbXTsKICAgICAgdmFyIHRvdGFsX2F2YWlsYWJsZV9xdHkgPSAwOwogICAgICB2YXIgdG90YWxfZXN0aW1hdGVfcXR5ID0gMDsKICAgICAgdGhpcy5saW5lcy5mb3JFYWNoKGZ1bmN0aW9uICh2YWwsIGtleSkgewogICAgICAgIGlmICghdG90YWxfZmFybWVycy5pbmNsdWRlcyh2YWwuZmFybWVyKSAmJiB2YWwuZmFybWVyKSB7CiAgICAgICAgICB0b3RhbF9mYXJtZXJzLnB1c2godmFsLmZhcm1lcik7CiAgICAgICAgfQoKICAgICAgICB0b3RhbF9hdmFpbGFibGVfcXR5ID0gdG90YWxfYXZhaWxhYmxlX3F0eSArIHBhcnNlRmxvYXQodmFsLnByb2N1cmVfcXR5KTsKICAgICAgICB0b3RhbF9lc3RpbWF0ZV9xdHkgPSB0b3RhbF9lc3RpbWF0ZV9xdHkgKyBwYXJzZUZsb2F0KHZhbC5lc3RpbWF0ZV9xdHkpOwogICAgICB9KTsKICAgICAgdGhpcy5mb3JtX2RhdGEudG90YWxfZmFybWVycyA9IHRvdGFsX2Zhcm1lcnMubGVuZ3RoOwogICAgICB0aGlzLmZvcm1fZGF0YS50b3RhbF9hdmFpbGFibGVfcXR5ID0gdG90YWxfYXZhaWxhYmxlX3F0eTsKICAgICAgdGhpcy5mb3JtX2RhdGEudG90YWxfZXN0aW1hdGVfcXR5ID0gdG90YWxfZXN0aW1hdGVfcXR5OwogICAgfSwKICAgIHByb2R1Y3RJZDogZnVuY3Rpb24gcHJvZHVjdElkKGlkKSB7CiAgICAgIHRoaXMucHJvZHVjdF9pZCA9IGlkOwogICAgICB0aGlzLmZvcm1fZGF0YS5wcm9kdWN0ID0gaWQ7CiAgICB9LAogICAgc2VhcmNoRmFybWVyczogZnVuY3Rpb24gc2VhcmNoRmFybWVycyhsaW5lKSB7CiAgICAgIHZhciBmYXJtZXJfY29kZSA9IGxpbmUuZmFybWVyX2RldGFpbC5mYXJtZXJfY29kZTsKCiAgICAgIGlmIChmYXJtZXJfY29kZS5sZW5ndGggPCAxKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CgogICAgICB2YXIgaGVhZGVycyA9IG5ldyBIZWFkZXJzKCk7CiAgICAgIHZhciBmb3JtZGF0YSA9IG5ldyBGb3JtRGF0YSgpOwogICAgICBmb3JtZGF0YS5hcHBlbmQoJ2Zhcm1lcl9jb2RlJywgZmFybWVyX2NvZGUpOwogICAgICBmb3JtZGF0YS5hcHBlbmQoJ3NlYXJjaF90eXBlJywgJ25vcm1hbF9wcm9jdXJlbWVudCcpOwogICAgICBoZWFkZXJzLmFwcGVuZCgiQXV0aG9yaXphdGlvbiIsICJUb2tlbiAiICsgdGhpcy4kcm9vdC50b2tlbik7CiAgICAgIGZldGNoKHRoaXMuYXBpX3VybCArICcvZnBvL3NlYXJjaF9mYXJtZXJzLycsIHsKICAgICAgICBtZXRob2Q6ICdwb3N0JywKICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLAogICAgICAgIGJvZHk6IGZvcm1kYXRhCiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTsKICAgICAgfSkudGhlbihmdW5jdGlvbiAoanNvbkRhdGEpIHsKICAgICAgICBsaW5lLmZhcm1lcnNfbGlzdCA9IGpzb25EYXRhOwogICAgICB9KTsKICAgIH0sCiAgICBzZWxlY3RGYXJtZXI6IGZ1bmN0aW9uIHNlbGVjdEZhcm1lcigpIHsKICAgICAgdmFyIGZhcm1lciA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogbnVsbDsKICAgICAgdmFyIGxpbmUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDsKCiAgICAgIGlmIChmYXJtZXIpIHsKICAgICAgICBsaW5lLmZhcm1lcl9kZXRhaWwuZmFybWVyX2NvZGUgPSBmYXJtZXIuZmFybWVyX2NvZGU7CiAgICAgICAgbGluZS5mYXJtZXJfZGV0YWlsLm5hbWUgPSBmYXJtZXIubmFtZTsKICAgICAgICBsaW5lLmZhcm1lciA9IGZhcm1lci5pZDsKICAgICAgICBsaW5lLmZhcm1lcnNfbGlzdCA9IFtdOwogICAgICB9CgogICAgICB2YXIgaGVhZGVycyA9IG5ldyBIZWFkZXJzKCk7CiAgICAgIHZhciBmb3JtZGF0YSA9IG5ldyBGb3JtRGF0YSgpOwogICAgICBmb3JtZGF0YS5hcHBlbmQoJ2Zhcm1lcicsIGxpbmUuZmFybWVyKTsKICAgICAgZm9ybWRhdGEuYXBwZW5kKCdwcm9kdWN0JywgdGhpcy5wcm9kdWN0X2lkKTsKICAgICAgaGVhZGVycy5hcHBlbmQoIkF1dGhvcml6YXRpb24iLCAiVG9rZW4gIiArIHRoaXMuJHJvb3QudG9rZW4pOwogICAgICBmZXRjaCh0aGlzLmFwaV91cmwgKyAnL2Zwby9mYXJtZXJfZnVsbF9kZXRhaWxzLycsIHsKICAgICAgICBtZXRob2Q6ICdwb3N0JywKICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLAogICAgICAgIGJvZHk6IGZvcm1kYXRhCiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTsKICAgICAgfSkudGhlbihmdW5jdGlvbiAoanNvbkRhdGEpIHsKICAgICAgICBsaW5lLmVzdGltYXRlX3F0eSA9IGpzb25EYXRhLmVzdGltYXRlX3F0eTsKICAgICAgfSk7CiAgICB9LAogICAgY2hhbmdlVmVoaWNsZTogZnVuY3Rpb24gY2hhbmdlVmVoaWNsZSgpIHsKICAgICAgaWYgKHRoaXMuZm9ybV9kYXRhLnZlaGljbGUgPT0gJ2NyZWF0ZScpIHsKICAgICAgICB0aGlzLmZvcm1fZGF0YS52ZWhpY2xlID0gJyc7CiAgICAgICAgdGhpcy4kYnZNb2RhbC5zaG93KCdjcmVhdGUtdmVoaWNsZScpOwogICAgICB9CiAgICB9LAogICAgZ2V0Rm9ybTogZnVuY3Rpb24gZ2V0Rm9ybSgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciBoZWFkZXJzID0gbmV3IEhlYWRlcnMoKTsKICAgICAgaGVhZGVycy5hcHBlbmQoIkF1dGhvcml6YXRpb24iLCAiVG9rZW4gIiArIHRoaXMuJHJvb3QudG9rZW4pOwogICAgICBmZXRjaCh0aGlzLmFwaV91cmwgKyAnL3FjL25vcm1hbF9wcm9jdXJlZC8nICsgdGhpcy5pZCArICcvJywgewogICAgICAgIG1ldGhvZDogJ2dldCcsCiAgICAgICAgaGVhZGVyczogaGVhZGVycwogICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7CiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGpzb25EYXRhKSB7CiAgICAgICAgX3RoaXMucHJvZHVjdF9pZCA9IGpzb25EYXRhLnByb2R1Y3Q7CiAgICAgICAgX3RoaXMuZm9ybV9kYXRhID0ganNvbkRhdGE7CiAgICAgICAgX3RoaXMubGluZXMgPSBqc29uRGF0YS5mYXJtZXJfbGluZXM7CiAgICAgICAgX3RoaXMubG9hZF9wcm9kdWN0cyA9IHRydWU7CgogICAgICAgIF90aGlzLmNhbGN1bHRpb24oKTsKICAgICAgfSk7CiAgICB9LAogICAgZGF0YUZvcm06IGZ1bmN0aW9uIGRhdGFGb3JtKCkgewogICAgICBpZiAodGhpcy5hY3Rpb24gPT0gJ2NyZWF0ZScpIHsKICAgICAgICB0aGlzLmNyZWF0ZUZvcm1kYXRhKCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy51cGRhdGVGb3JtZGF0YSgpOwogICAgICB9CiAgICB9LAogICAgY3JlYXRlRm9ybWRhdGE6IGZ1bmN0aW9uIGNyZWF0ZUZvcm1kYXRhKCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIHZhciBmb3JtZGF0YSA9IG5ldyBGb3JtRGF0YSh0aGlzLiRyZWZzWydkYXRhRm9ybSddKTsKICAgICAgZm9ybWRhdGEuYXBwZW5kKCdhZW8nLCAyKTsKICAgICAgZm9ybWRhdGEuYXBwZW5kKCdjdXJyZW50X3N0YXR1cycsICdzYW1wbGVfcHJvY3VyZW1lbnQnKTsKICAgICAgdmFyIGhlYWRlcnMgPSBuZXcgSGVhZGVycygpOwogICAgICBoZWFkZXJzLmFwcGVuZCgiQXV0aG9yaXphdGlvbiIsICJUb2tlbiAiICsgdGhpcy4kcm9vdC50b2tlbik7CiAgICAgIGZldGNoKHRoaXMuYXBpX3VybCArICcvcWMvbm9ybWFsX3Byb2N1cmVkLycsIHsKICAgICAgICBtZXRob2Q6ICdQT1NUJywKICAgICAgICBib2R5OiBmb3JtZGF0YSwKICAgICAgICBoZWFkZXJzOiBoZWFkZXJzCiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTsKICAgICAgfSkudGhlbihmdW5jdGlvbiAoanNvbkRhdGEpIHsKICAgICAgICBpZiAoanNvbkRhdGEuaWQgPiAwKSB7CiAgICAgICAgICBfdGhpczIuZm9ybV9kYXRhID0ganNvbkRhdGE7CiAgICAgICAgICBfdGhpczIuaWQgPSBqc29uRGF0YS5pZDsKCiAgICAgICAgICBfdGhpczIudXBkYXRlRm9ybWRhdGEoKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgX3RoaXMyLnNob3dBbGVydCgnU29tZXRoaW5nIFdyb25nIScpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAogICAgdXBkYXRlRm9ybWRhdGE6IGZ1bmN0aW9uIHVwZGF0ZUZvcm1kYXRhKCkgewogICAgICB2YXIgX3RoaXMzID0gdGhpczsKCiAgICAgIHZhciBmb3JtZGF0YSA9IG5ldyBGb3JtRGF0YSh0aGlzLiRyZWZzWydkYXRhRm9ybSddKTsKICAgICAgdmFyIGhlYWRlcnMgPSBuZXcgSGVhZGVycygpOwogICAgICBoZWFkZXJzLmFwcGVuZCgiQXV0aG9yaXphdGlvbiIsICJUb2tlbiAiICsgdGhpcy4kcm9vdC50b2tlbik7CiAgICAgIGZldGNoKHRoaXMuYXBpX3VybCArICcvcWMvbm9ybWFsX3Byb2N1cmVkLycgKyB0aGlzLmlkICsgJy8nLCB7CiAgICAgICAgbWV0aG9kOiAnUFVUJywKICAgICAgICBib2R5OiBmb3JtZGF0YSwKICAgICAgICBoZWFkZXJzOiBoZWFkZXJzCiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTsKICAgICAgfSkudGhlbihmdW5jdGlvbiAoanNvbkRhdGEpIHsKICAgICAgICBpZiAoanNvbkRhdGEuaWQgPiAwKSB7CiAgICAgICAgICBfdGhpczMuc2hvd0FsZXJ0KCdTYXZlZCBTdWNjZXNzZnVsbHkhJyk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIF90aGlzMy5zaG93QWxlcnQoJ1NvbWV0aGluZyBXcm9uZyEnKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSwKICAgIGdldFZlaGljbGVzOiBmdW5jdGlvbiBnZXRWZWhpY2xlcygpIHsKICAgICAgdmFyIF90aGlzNCA9IHRoaXM7CgogICAgICB2YXIgaGVhZGVycyA9IG5ldyBIZWFkZXJzKCk7CiAgICAgIGhlYWRlcnMuYXBwZW5kKCJBdXRob3JpemF0aW9uIiwgIlRva2VuICIgKyB0aGlzLiRyb290LnRva2VuKTsKICAgICAgZmV0Y2godGhpcy5hcGlfdXJsICsgJy9xYy92ZWhpY2xlLycsIHsKICAgICAgICBtZXRob2Q6ICdnZXQnLAogICAgICAgIGhlYWRlcnM6IGhlYWRlcnMKICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpOwogICAgICB9KS50aGVuKGZ1bmN0aW9uIChqc29uRGF0YSkgewogICAgICAgIF90aGlzNC52ZWhpY2xlcyA9IGpzb25EYXRhOwoKICAgICAgICBfdGhpczQuZ2V0V2FyZWhvdXNlcygpOwogICAgICB9KTsKICAgIH0sCiAgICB2ZWhpY2xlRm9ybTogZnVuY3Rpb24gdmVoaWNsZUZvcm0oKSB7CiAgICAgIHZhciBfdGhpczUgPSB0aGlzOwoKICAgICAgdmFyIGZvcm1kYXRhID0gbmV3IEZvcm1EYXRhKHRoaXMuJHJlZnNbJ3ZlaGljbGVGb3JtJ10pOwogICAgICB2YXIgaGVhZGVycyA9IG5ldyBIZWFkZXJzKCk7CiAgICAgIGhlYWRlcnMuYXBwZW5kKCJBdXRob3JpemF0aW9uIiwgIlRva2VuICIgKyB0aGlzLiRyb290LnRva2VuKTsKICAgICAgZmV0Y2godGhpcy5hcGlfdXJsICsgJy9xYy92ZWhpY2xlLycsIHsKICAgICAgICBtZXRob2Q6ICdQT1NUJywKICAgICAgICBib2R5OiBmb3JtZGF0YSwKICAgICAgICBoZWFkZXJzOiBoZWFkZXJzCiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTsKICAgICAgfSkudGhlbihmdW5jdGlvbiAoanNvbkRhdGEpIHsKICAgICAgICBpZiAoanNvbkRhdGEuaWQgPiAwKSB7CiAgICAgICAgICBfdGhpczUuZ2V0VmVoaWNsZXMoKTsKCiAgICAgICAgICBfdGhpczUuZm9ybV9kYXRhLnZlaGljbGUgPSBqc29uRGF0YS5pZDsKCiAgICAgICAgICBfdGhpczUuJGJ2TW9kYWwuaGlkZSgnY3JlYXRlLXZlaGljbGUnKTsKCiAgICAgICAgICBfdGhpczUuc2hvd0FsZXJ0KCdTYXZlZCBTdWNjZXNzZnVsbHkhJyk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIF90aGlzNS5zaG93QWxlcnQoJ1NvbWV0aGluZyBXcm9uZyEnKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH0KfTs="},null]}