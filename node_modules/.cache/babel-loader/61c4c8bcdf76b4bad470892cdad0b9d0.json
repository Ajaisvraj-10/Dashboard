{"remainingRequest":"E:\\vue_projects\\biowin\\node_modules\\thread-loader\\dist\\cjs.js!E:\\vue_projects\\biowin\\node_modules\\babel-loader\\lib\\index.js!E:\\vue_projects\\biowin\\src\\store\\modules\\scrumboard.js","dependencies":[{"path":"E:\\vue_projects\\biowin\\src\\store\\modules\\scrumboard.js","mtime":1587811212000},{"path":"E:\\vue_projects\\biowin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\vue_projects\\biowin\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\vue_projects\\biowin\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}