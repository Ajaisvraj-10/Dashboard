{"remainingRequest":"E:\\vue_projects\\biowin\\node_modules\\thread-loader\\dist\\cjs.js!E:\\vue_projects\\biowin\\node_modules\\babel-loader\\lib\\index.js!E:\\vue_projects\\biowin\\node_modules\\vuetify-loader\\lib\\loader.js??ref--17-0!E:\\vue_projects\\biowin\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\vue_projects\\biowin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\vue_projects\\biowin\\src\\views\\app\\oodo\\task\\tasks.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\vue_projects\\biowin\\src\\views\\app\\oodo\\task\\tasks.vue","mtime":1676527004570},{"path":"E:\\vue_projects\\biowin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\vue_projects\\biowin\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\vue_projects\\biowin\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\vue_projects\\biowin\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1574476662000},{"path":"E:\\vue_projects\\biowin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\vue_projects\\biowin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5jbHVkZXMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pbmRleC1vZiI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNwbGljZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmciOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaW5jbHVkZXMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaXRlcmF0b3IiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucmVwZWF0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5pdGVyYXRvciI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi51cmwiOwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwpleHBvcnQgZGVmYXVsdCB7CiAgbWV0YUluZm86IHt9LAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICB0YXNrczogW10sCiAgICAgIHVzZXJzOiBbXSwKICAgICAgbmV3X3Rhc2s6IHsKICAgICAgICBpc19jb21wbGV0ZWQ6IGZhbHNlLAogICAgICAgIGR1ZV9kYXRlOiAnJywKICAgICAgICByZW1pZGVyX2RhdGU6ICcnLAogICAgICAgIHJlcGVhdDogJ05vbmUnLAogICAgICAgIHByaW9yaXR5OiAnTm9ybWFsJwogICAgICB9LAogICAgICBuZXdfc3ViX3Rhc2s6IHsKICAgICAgICBpc19jb21wbGV0ZWQ6IGZhbHNlLAogICAgICAgIGR1ZV9kYXRlOiAnJywKICAgICAgICByZW1pZGVyX2RhdGU6ICcnLAogICAgICAgIHJlcGVhdDogJ05vbmUnLAogICAgICAgIHByaW9yaXR5OiAnTm9ybWFsJwogICAgICB9LAogICAgICBjdXJyZW50X3Rhc2s6IHsKICAgICAgICBpc19jb21wbGV0ZWQ6IGZhbHNlLAogICAgICAgIG5vdF9kZWxldGVkOiAxLAogICAgICAgIHN1Yl90YXNrc19jb3VudDogMAogICAgICB9LAogICAgICBjdXJyZW50X21haW5fdGFzazogewogICAgICAgIGlzX2NvbXBsZXRlZDogZmFsc2UsCiAgICAgICAgbm90X2RlbGV0ZWQ6IDEKICAgICAgfSwKICAgICAgcmVwZWF0czogWydOb25lJywgJ0RpYWx5JywgJ1dlZWtseScsICdNb250aGx5JywgJ1llYXJseSddLAogICAgICB0YXNrX2NhdGVnb3JpZXM6IFsnbXlfdGFza3MnLCAnYXNzaWduZWRfdGFza3NfdG9fbWUnLCAnY29tcGxldGVkX3Rhc2tzJ10sCiAgICAgIHByaW9yaXRpZXM6IFsnVXJnZW50JywgJ01lZGl1bScsICdOb3JtYWwnXSwKICAgICAgdGFnczogW10sCiAgICAgIG5ld19hY3Rpdml0eTogewogICAgICAgIG5vdGU6ICcnLAogICAgICAgIHByZXZpZXdfaW1hZ2U6ICcnCiAgICAgIH0sCiAgICAgIHRhc2tfYWN0aXZpdGllczogW10sCiAgICAgIHRhZ19zdGF0dXM6IFtdLAogICAgICBjdXJyZW50X3Rhc2tfY2F0ZWdvcnk6ICdteV90YXNrcycsCiAgICAgIGlzX25ld190YXNrOiB0cnVlLAogICAgICB0b2dnbGU6IGZhbHNlLAogICAgICBpc19zdGFydDogZmFsc2UKICAgIH07CiAgfSwKICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkgewogICAgdGhpcy4kcm9vdC5jdXJyZW50X3NlY3Rpb24gPSAndGFzayc7CiAgICB0aGlzLmdldFRhc2tzKCk7CiAgICB0aGlzLmdldFVzZXJzKCk7CiAgICB0aGlzLmdldFRhZ3MoKTsKICB9LAogIG1ldGhvZHM6IHsKICAgIHJlbG9hZFRhc2tzOiBmdW5jdGlvbiByZWxvYWRUYXNrcygpIHsKICAgICAgdGhpcy50YXNrcyA9IFtdOwogICAgICB0aGlzLmdldFRhc2tzKCk7CiAgICB9LAogICAgc2VsZWN0VGFza0NhdDogZnVuY3Rpb24gc2VsZWN0VGFza0NhdCh0YXNrX2NhdGVnb3J5KSB7CiAgICAgIHRoaXMuaXNfbmV3X3Rhc2sgPSB0cnVlOwogICAgICB0aGlzLmN1cnJlbnRfdGFza19jYXRlZ29yeSA9IHRhc2tfY2F0ZWdvcnk7CiAgICAgIHRoaXMudGFza3MgPSBbXTsKICAgICAgdGhpcy5jdXJyZW50X3Rhc2sgPSB7fTsKICAgICAgdGhpcy5nZXRUYXNrcygpOwogICAgfSwKICAgIGdldERhdGVJczogZnVuY3Rpb24gZ2V0RGF0ZUlzKCkgewogICAgICB2YXIgdHlwZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogJ1RvZGF5JzsKICAgICAgdmFyIGFjdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJyc7CiAgICAgIHZhciB0b2RheSA9IG5ldyBEYXRlKCk7CiAgICAgIHZhciBkYXRlID0gJyc7CgogICAgICBpZiAodHlwZSA9PSAnVG9kYXknKSB7CiAgICAgICAgZGF0ZSA9IHRvZGF5LnNldERhdGUodG9kYXkuZ2V0RGF0ZSgpKTsKICAgICAgfQoKICAgICAgaWYgKHR5cGUgPT0gJ1RvbW9ycm93JykgewogICAgICAgIGRhdGUgPSB0b2RheS5zZXREYXRlKHRvZGF5LmdldERhdGUoKSArIDEpOwogICAgICB9CgogICAgICBpZiAodHlwZSA9PSAnTmV4dCBXZWVrJykgewogICAgICAgIGRhdGUgPSB0b2RheS5zZXREYXRlKHRvZGF5LmdldERhdGUoKSArIDcpOwogICAgICB9CgogICAgICBpZiAoYWN0aW9uID09ICdjbGljaycpIHsKICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50RGF0ZShkYXRlKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHRoaXMuZGF0ZUZvcm1hdGUoZGF0ZSk7CiAgICB9LAogICAgZ2V0VGFza3M6IGZ1bmN0aW9uIGdldFRhc2tzKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdGhpcy5pc19zdGFydCA9IGZhbHNlOwogICAgICB2YXIgaGVhZGVycyA9IG5ldyBIZWFkZXJzKCk7CiAgICAgIGhlYWRlcnMuYXBwZW5kKCJBdXRob3JpemF0aW9uIiwgIkJlYXJlciAiICsgdGhpcy4kcm9vdC50b2tlbik7CiAgICAgIGZldGNoKHRoaXMuYXBpX3VybCArICcvZW1wbG95ZWUvdGFza3MvP3Rhc2tfdHlwZT0nICsgdGhpcy5jdXJyZW50X3Rhc2tfY2F0ZWdvcnksIHsKICAgICAgICBtZXRob2Q6ICdnZXQnLAogICAgICAgIGhlYWRlcnM6IGhlYWRlcnMKICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpOwogICAgICB9KS50aGVuKGZ1bmN0aW9uIChqc29uRGF0YSkgewogICAgICAgIF90aGlzLmlzX3N0YXJ0ID0gdHJ1ZTsKICAgICAgICBfdGhpcy50YXNrcyA9IGpzb25EYXRhOwogICAgICB9KTsKICAgIH0sCiAgICBzZWxlY3RUYXNrOiBmdW5jdGlvbiBzZWxlY3RUYXNrKHRhc2spIHsKICAgICAgdmFyIHNlbGYgPSB0aGlzOwogICAgICB0aGlzLmlzX25ld190YXNrID0gZmFsc2U7CgogICAgICBpZiAodGFzay5tYWluX3Rhc2sgJiYgdGFzay51c2VyICE9IHRoaXMudXNlcklkICYmICF0YXNrLmFzc2lnbl90YXNrLmluY2x1ZGVzKHRoaXMudXNlcklkKSkgewogICAgICAgIHRoaXMuc2hvd0FsZXJ0KCdUaGUgdGFzayBpcyBub3QgeW91cnMnLCAncmVkJyk7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CgogICAgICB0aGlzLmN1cnJlbnRfdGFzayA9IHt9OwoKICAgICAgaWYgKHRhc2subWFpbl90YXNrKSB7CiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICBzZWxmLmN1cnJlbnRfdGFzayA9IHRhc2s7CiAgICAgICAgfSwgMCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5nZXRTdWJUYXNrcyh0YXNrKTsKICAgICAgfQogICAgfSwKICAgIGdldFN1YlRhc2tzOiBmdW5jdGlvbiBnZXRTdWJUYXNrcyh0YXNrKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgdmFyIGhlYWRlcnMgPSBuZXcgSGVhZGVycygpOwogICAgICBoZWFkZXJzLmFwcGVuZCgiQXV0aG9yaXphdGlvbiIsICJCZWFyZXIgIiArIHRoaXMuJHJvb3QudG9rZW4pOwogICAgICBmZXRjaCh0aGlzLmFwaV91cmwgKyAnL2VtcGxveWVlL3Rhc2tzLz90YXNrX3R5cGU9JyArIHRoaXMuY3VycmVudF90YXNrX2NhdGVnb3J5ICsgJyZzdWJfdGFzaz0nICsgdGFzay5pZCwgewogICAgICAgIG1ldGhvZDogJ2dldCcsCiAgICAgICAgaGVhZGVyczogaGVhZGVycwogICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7CiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGpzb25EYXRhKSB7CiAgICAgICAgaWYgKCFfdGhpczIuY3VycmVudF90YXNrLmlkKSB7CiAgICAgICAgICBfdGhpczIuY3VycmVudF90YXNrID0gdGFzazsKICAgICAgICB9CgogICAgICAgIHRhc2suc3ViX3Rhc2tzID0ganNvbkRhdGE7CiAgICAgIH0pOwogICAgfSwKICAgIGNyZWF0ZUZvcm1kYXRhOiBmdW5jdGlvbiBjcmVhdGVGb3JtZGF0YSgpIHsKICAgICAgdmFyIF90aGlzMyA9IHRoaXM7CgogICAgICB2YXIgdGFzayA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogewogICAgICAgIGlkOiBudWxsCiAgICAgIH07CgogICAgICBpZiAodGhpcy5sb2NrX2J0bikgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQoKICAgICAgdGhpcy5sb2NrX2J0biA9IHRydWU7CiAgICAgIHZhciBmb3JtZGF0YSA9IG5ldyBGb3JtRGF0YSh0aGlzLiRyZWZzWyduZXdGb3JtJ10pOwoKICAgICAgaWYgKHRhc2suaWQpIHsKICAgICAgICBmb3JtZGF0YSA9IG5ldyBGb3JtRGF0YShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbmV3U3ViRm9ybScgKyB0YXNrLmlkKSk7CiAgICAgICAgZm9ybWRhdGEuYXBwZW5kKCdtYWluX3Rhc2snLCB0YXNrLmlkKTsKICAgICAgfQoKICAgICAgZm9ybWRhdGEuYXBwZW5kKCd1c2VyJywgdGhpcy51c2VySWQpOwogICAgICBmb3JtZGF0YS5hcHBlbmQoJ25vdF9kZWxldGVkJywgMSk7CiAgICAgIHZhciBoZWFkZXJzID0gbmV3IEhlYWRlcnMoKTsKICAgICAgaGVhZGVycy5hcHBlbmQoIkF1dGhvcml6YXRpb24iLCAiQmVhcmVyICIgKyB0aGlzLiRyb290LnRva2VuKTsKICAgICAgZmV0Y2godGhpcy5hcGlfdXJsICsgJy9lbXBsb3llZS90YXNrcy8nLCB7CiAgICAgICAgbWV0aG9kOiAnUE9TVCcsCiAgICAgICAgYm9keTogZm9ybWRhdGEsCiAgICAgICAgaGVhZGVyczogaGVhZGVycwogICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7CiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGpzb25EYXRhKSB7CiAgICAgICAgX3RoaXMzLmxvY2tfYnRuID0gZmFsc2U7CgogICAgICAgIGlmIChqc29uRGF0YS5pZCA+IDApIHsKICAgICAgICAgIF90aGlzMy5uZXdfdGFzayA9IHsKICAgICAgICAgICAgaXNfY29tcGxldGVkOiBmYWxzZSwKICAgICAgICAgICAgZHVlX2RhdGU6ICcnLAogICAgICAgICAgICByZW1pZGVyX2RhdGU6ICcnLAogICAgICAgICAgICByZXBlYXQ6ICdOb25lJwogICAgICAgICAgfTsKICAgICAgICAgIF90aGlzMy5uZXdfc3ViX3Rhc2sgPSB7CiAgICAgICAgICAgIGlzX2NvbXBsZXRlZDogZmFsc2UsCiAgICAgICAgICAgIGR1ZV9kYXRlOiAnJywKICAgICAgICAgICAgcmVtaWRlcl9kYXRlOiAnJywKICAgICAgICAgICAgcmVwZWF0OiAnTm9uZScKICAgICAgICAgIH07CiAgICAgICAgICBfdGhpczMuY3VycmVudF90YXNrID0ganNvbkRhdGE7CgogICAgICAgICAgX3RoaXMzLnVwZGF0ZVN1YlRhc2soKTsgLy8gdGhpcy5zaG93QWxlcnQoJ0FkZGVkIFN1Y2Nlc3NmdWxseSEnKQoKICAgICAgICB9IGVsc2UgewogICAgICAgICAgX3RoaXMzLnNob3dBbGVydCgnU29tZXRoaW5nIFdyb25nIScpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAogICAgdXBkYXRlRm9ybWRhdGE6IGZ1bmN0aW9uIHVwZGF0ZUZvcm1kYXRhKCkgewogICAgICB2YXIgX3RoaXM0ID0gdGhpczsKCiAgICAgIGlmICh0aGlzLmN1cnJlbnRfdGFzay51c2VyICE9IHRoaXMudXNlcklkICYmIHRoaXMuY3VycmVudF90YXNrLmltYWdlX2NvbXB1bHNvcnkgJiYgIXRoaXMuY3VycmVudF90YXNrLnByZXZpZXdfaW1hZ2UgJiYgIXRoaXMuY3VycmVudF90YXNrLmltYWdlKSB7CiAgICAgICAgdGhpcy5zaG93QWxlcnQoJ1BsZWFzZSBhdHRhY2ggYW4gaW1hZ2UnLCAncmVkJyk7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CgogICAgICB2YXIgZm9ybWRhdGEgPSBuZXcgRm9ybURhdGEodGhpcy4kcmVmc1snZGF0YUZvcm0nXSk7CiAgICAgIGZvcm1kYXRhLmFwcGVuZCgndXNlcicsIHRoaXMuY3VycmVudF90YXNrLnVzZXIpOwogICAgICB2YXIgaGVhZGVycyA9IG5ldyBIZWFkZXJzKCk7CiAgICAgIGhlYWRlcnMuYXBwZW5kKCJBdXRob3JpemF0aW9uIiwgIkJlYXJlciAiICsgdGhpcy4kcm9vdC50b2tlbik7CiAgICAgIGZldGNoKHRoaXMuYXBpX3VybCArICcvZW1wbG95ZWUvdGFza3MvJyArIHRoaXMuY3VycmVudF90YXNrLmlkICsgJy8nLCB7CiAgICAgICAgbWV0aG9kOiAnUFVUJywKICAgICAgICBib2R5OiBmb3JtZGF0YSwKICAgICAgICBoZWFkZXJzOiBoZWFkZXJzCiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTsKICAgICAgfSkudGhlbihmdW5jdGlvbiAoanNvbkRhdGEpIHsKICAgICAgICBpZiAoanNvbkRhdGEuaWQgPiAwKSB7CiAgICAgICAgICBfdGhpczQuY3VycmVudF90YXNrID0ganNvbkRhdGE7CgogICAgICAgICAgaWYgKF90aGlzNC5jdXJyZW50X3Rhc2subm90X2RlbGV0ZWQpIHsKICAgICAgICAgICAgX3RoaXM0LnVwZGF0ZVN1YlRhc2soKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIF90aGlzNC5zaG93QWxlcnQoJ1Rhc2sgRGVsZXRlZCEnLCAncmVkJyk7CgogICAgICAgICAgICBfdGhpczQuZ2V0VGFza3MoKTsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgX3RoaXM0LnNob3dBbGVydCgnU29tZXRoaW5nIFdyb25nIScpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAogICAgdXBkYXRlU3ViVGFzazogZnVuY3Rpb24gdXBkYXRlU3ViVGFzaygpIHsKICAgICAgdmFyIF90aGlzNSA9IHRoaXM7CgogICAgICBpZiAodGhpcy5jdXJyZW50X3Rhc2tfY2F0ZWdvcnkgPT0gJ2NvbXBsZXRlZF90YXNrcycpIHsKICAgICAgICB0aGlzLnNob3dBbGVydCgnVGhlIHRhc2sgd2FzIGNvbXBsZXRlZCEnLCAncmVkJyk7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CgogICAgICB2YXIgZm9ybWRhdGEgPSBuZXcgRm9ybURhdGEoKTsKICAgICAgZm9ybWRhdGEuYXBwZW5kKCd0YXNrJywgdGhpcy5jdXJyZW50X3Rhc2suaWQpOwogICAgICB2YXIgaGVhZGVycyA9IG5ldyBIZWFkZXJzKCk7CiAgICAgIGhlYWRlcnMuYXBwZW5kKCJBdXRob3JpemF0aW9uIiwgIkJlYXJlciAiICsgdGhpcy4kcm9vdC50b2tlbik7CiAgICAgIGZldGNoKHRoaXMuYXBpX3VybCArICcvZW1wbG95ZWUvdXBkYXRlX3N1Yl90YXNrcy8nLCB7CiAgICAgICAgbWV0aG9kOiAnUE9TVCcsCiAgICAgICAgYm9keTogZm9ybWRhdGEsCiAgICAgICAgaGVhZGVyczogaGVhZGVycwogICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7CiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGpzb25EYXRhKSB7CiAgICAgICAgaWYgKGpzb25EYXRhLmlkID4gMCkgewogICAgICAgICAgX3RoaXM1LmN1cnJlbnRfdGFzayA9IGpzb25EYXRhOwoKICAgICAgICAgIGlmIChqc29uRGF0YS5tYWluX3Rhc2spIHsKICAgICAgICAgICAgX3RoaXM1LmdldFN1YlRhc2tzKF90aGlzNS5jdXJyZW50X21haW5fdGFzayk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBfdGhpczUuZ2V0VGFza3MoKTsKICAgICAgICAgIH0KCiAgICAgICAgICBfdGhpczUuc2hvd0FsZXJ0KCdTYXZlZCEnKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSwKICAgIHNlbGVjdEZpbGU6IGZ1bmN0aW9uIHNlbGVjdEZpbGUoZSkgewogICAgICB2YXIgaW1nX2ZpbGUgPSBlLnRhcmdldC5maWxlc1swXTsKCiAgICAgIGlmIChpbWdfZmlsZSkgewogICAgICAgIHRoaXMubmV3X2FjdGl2aXR5LnByZXZpZXdfaW1hZ2UgPSAnJzsKICAgICAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICBzZWxmLm5ld19hY3Rpdml0eS5wcmV2aWV3X2ltYWdlID0gVVJMLmNyZWF0ZU9iamVjdFVSTChpbWdfZmlsZSk7CiAgICAgICAgfSwgMTApOwogICAgICB9CiAgICB9LAogICAgZGVsZXRlVGFzazogZnVuY3Rpb24gZGVsZXRlVGFzaygpIHsKICAgICAgdmFyIF90aGlzNiA9IHRoaXM7CgogICAgICB2YXIgY29uZmlybSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogdHJ1ZTsKCiAgICAgIGlmIChjb25maXJtKSB7CiAgICAgICAgdGhpcy4kc3dhbCh7CiAgICAgICAgICB0aXRsZTogIkRlbGV0ZSBUYXNrIiwKICAgICAgICAgIHRleHQ6ICdBcmUgeW91IHN1cmU/JywKICAgICAgICAgIHNob3dDYW5jZWxCdXR0b246IHRydWUsCiAgICAgICAgICBjb25maXJtQnV0dG9uQ29sb3I6ICIjMzA4NWQ2IiwKICAgICAgICAgIGNhbmNlbEJ1dHRvbkNvbG9yOiAiI2QzMyIsCiAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogIlllcyIsCiAgICAgICAgICBjYW5jZWxCdXR0b25UZXh0OiAiTm8iCiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgICBpZiAocmVzdWx0LnZhbHVlKSB7CiAgICAgICAgICAgIF90aGlzNi5kZWxldGVUYXNrKGZhbHNlKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KCiAgICAgIGlmICh0aGlzLmN1cnJlbnRfdGFzay51c2VyID09IHRoaXMudXNlcklkKSB7CiAgICAgICAgdGhpcy5jdXJyZW50X3Rhc2subm90X2RlbGV0ZWQgPSAwOwogICAgICB9CgogICAgICB0aGlzLnVwZGF0ZUZvcm1kYXRhMigpOwogICAgfSwKICAgIGNvbXBsZXRlVGFzazogZnVuY3Rpb24gY29tcGxldGVUYXNrKHRhc2spIHsKICAgICAgdmFyIF90aGlzNyA9IHRoaXM7CgogICAgICB2YXIgY29uZmlybSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdHJ1ZTsKCiAgICAgIGlmICghdGFzay5hc3NpZ25fdGFzay5pbmNsdWRlcyh0aGlzLnVzZXJJZCkpIHsKICAgICAgICB0aGlzLnNob3dBbGVydCgnU3RhdHVzIGlzICcgKyB0YXNrLnN0YXR1cywgJ3llbGxvdycpOwogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQoKICAgICAgaWYgKGNvbmZpcm0pIHsKICAgICAgICB0aGlzLiRzd2FsKHsKICAgICAgICAgIHRpdGxlOiAiQ29tcGxldGVkIFRhc2siLAogICAgICAgICAgdGV4dDogJ0FyZSB5b3Ugc3VyZT8nLAogICAgICAgICAgc2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZSwKICAgICAgICAgIGNvbmZpcm1CdXR0b25Db2xvcjogIiMzMDg1ZDYiLAogICAgICAgICAgY2FuY2VsQnV0dG9uQ29sb3I6ICIjZDMzIiwKICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiAiWWVzIiwKICAgICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6ICJObyIKICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICAgIGlmIChyZXN1bHQudmFsdWUpIHsKICAgICAgICAgICAgX3RoaXM3LmNvbXBsZXRlVGFzayh0YXNrLCBmYWxzZSk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CgogICAgICB0YXNrLnN0YXR1cyA9ICdDb21wbGV0ZWQnOwogICAgICB0aGlzLmN1cnJlbnRfdGFzayA9IHRhc2s7CiAgICAgIHRoaXMudXBkYXRlRm9ybWRhdGEyKCk7CiAgICB9LAogICAgZmluaXNoVGFzazogZnVuY3Rpb24gZmluaXNoVGFzaygpIHsKICAgICAgdmFyIF90aGlzOCA9IHRoaXM7CgogICAgICB2YXIgY29uZmlybSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogdHJ1ZTsKCiAgICAgIGlmICh0aGlzLmN1cnJlbnRfdGFzay51c2VyICE9IHRoaXMudXNlcklkKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CgogICAgICBpZiAoY29uZmlybSkgewogICAgICAgIHRoaXMuJHN3YWwoewogICAgICAgICAgdGl0bGU6ICJGaW5pc2ggVGFzayIsCiAgICAgICAgICB0ZXh0OiAnQXJlIHlvdSBzdXJlPycsCiAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlLAogICAgICAgICAgY29uZmlybUJ1dHRvbkNvbG9yOiAiIzMwODVkNiIsCiAgICAgICAgICBjYW5jZWxCdXR0b25Db2xvcjogIiNkMzMiLAogICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6ICJZZXMiLAogICAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogIk5vIgogICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkgewogICAgICAgICAgaWYgKHJlc3VsdC52YWx1ZSkgewogICAgICAgICAgICBfdGhpczguZmluaXNoVGFzayhmYWxzZSk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CgogICAgICB0aGlzLmN1cnJlbnRfdGFzay5pc19jb21wbGV0ZWQgPSAxOwogICAgICB0aGlzLnVwZGF0ZUZvcm1kYXRhMigpOwogICAgfSwKICAgIGdldFVzZXJzOiBmdW5jdGlvbiBnZXRVc2VycygpIHsKICAgICAgdmFyIF90aGlzOSA9IHRoaXM7CgogICAgICB2YXIgaGVhZGVycyA9IG5ldyBIZWFkZXJzKCk7CiAgICAgIGhlYWRlcnMuYXBwZW5kKCJBdXRob3JpemF0aW9uIiwgIlRva2VuICIgKyB0aGlzLiRyb290LnRva2VuKTsKICAgICAgZmV0Y2godGhpcy5hcGlfdXJsICsgJy91c2Vycy91c2Vycy8nLCB7CiAgICAgICAgbWV0aG9kOiAnZ2V0JywKICAgICAgICBoZWFkZXJzOiBoZWFkZXJzCiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTsKICAgICAgfSkudGhlbihmdW5jdGlvbiAoanNvbkRhdGEpIHsKICAgICAgICBfdGhpczkudXNlcnMgPSBqc29uRGF0YTsKICAgICAgfSk7CiAgICB9LAogICAgc2VsZWN0VXNlcjogZnVuY3Rpb24gc2VsZWN0VXNlcih1c2VyLCB1a2V5KSB7CiAgICAgIGlmICh0aGlzLmN1cnJlbnRfdGFzay5hc3NpZ25fdGFzay5pbmNsdWRlcyh1c2VyLmlkKSkgewogICAgICAgIHZhciBpbmRleCA9IHRoaXMuY3VycmVudF90YXNrLmFzc2lnbl90YXNrLmluZGV4T2YodXNlci5pZCk7CiAgICAgICAgdGhpcy5jdXJyZW50X3Rhc2suYXNzaWduX3Rhc2suc3BsaWNlKGluZGV4LCAxKTsKICAgICAgICB0aGlzLmN1cnJlbnRfdGFzay5hc3NpZ25fdXNlcnMuc3BsaWNlKGluZGV4LCAxKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLmN1cnJlbnRfdGFzay5hc3NpZ25fdGFzay5wdXNoKHVzZXIuaWQpOwogICAgICAgIHRoaXMuY3VycmVudF90YXNrLmFzc2lnbl91c2Vycy5wdXNoKHsKICAgICAgICAgIGlkOiB1c2VyLmlkLAogICAgICAgICAgdXNlcm5hbWU6IHVzZXIudXNlcm5hbWUKICAgICAgICB9KTsKICAgICAgfQoKICAgICAgdGhpcy51cGRhdGVGb3JtZGF0YTIoKTsgLy8gdmFyIHNlbGYgPSB0aGlzCiAgICAgIC8vIHNldFRpbWVvdXQoZnVuY3Rpb24oKXsKICAgICAgLy8gICBzZWxmLiRyZWZzLmFzc2lnbl90YXNrX2RycGR3bi5zaG93KHRydWUpCiAgICAgIC8vIH0sMCkKICAgIH0sCiAgICBnZXRUYWdzOiBmdW5jdGlvbiBnZXRUYWdzKCkgewogICAgICB2YXIgX3RoaXMxMCA9IHRoaXM7CgogICAgICB2YXIgaGVhZGVycyA9IG5ldyBIZWFkZXJzKCk7CiAgICAgIGhlYWRlcnMuYXBwZW5kKCJBdXRob3JpemF0aW9uIiwgIkJlYXJlciAiICsgdGhpcy4kcm9vdC50b2tlbik7CiAgICAgIGZldGNoKHRoaXMuYXBpX3VybCArICcvZW1wbG95ZWUvdGFza190YWdzLycsIHsKICAgICAgICBtZXRob2Q6ICdnZXQnLAogICAgICAgIGhlYWRlcnM6IGhlYWRlcnMKICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpOwogICAgICB9KS50aGVuKGZ1bmN0aW9uIChqc29uRGF0YSkgewogICAgICAgIF90aGlzMTAudGFncyA9IGpzb25EYXRhOwogICAgICB9KTsKICAgIH0sCiAgICBnZXRBY3Rpdml0aWVzOiBmdW5jdGlvbiBnZXRBY3Rpdml0aWVzKHRhc2spIHsKICAgICAgdmFyIF90aGlzMTEgPSB0aGlzOwoKICAgICAgdGhpcy5jdXJyZW50X3Rhc2sgPSB0YXNrOwogICAgICB0aGlzLnRhc2tfYWN0aXZpdGllcyA9IFtdOwogICAgICB0aGlzLiRidk1vZGFsLnNob3coJ2FjdGl2aXR5Jyk7CiAgICAgIHZhciBoZWFkZXJzID0gbmV3IEhlYWRlcnMoKTsKICAgICAgaGVhZGVycy5hcHBlbmQoIkF1dGhvcml6YXRpb24iLCAiQmVhcmVyICIgKyB0aGlzLiRyb290LnRva2VuKTsKICAgICAgZmV0Y2godGhpcy5hcGlfdXJsICsgJy9lbXBsb3llZS90YXNrX2FjdGl2aXRpZXMvP3Rhc2s9JyArIHRoaXMuY3VycmVudF90YXNrLmlkLCB7CiAgICAgICAgbWV0aG9kOiAnZ2V0JywKICAgICAgICBoZWFkZXJzOiBoZWFkZXJzCiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTsKICAgICAgfSkudGhlbihmdW5jdGlvbiAoanNvbkRhdGEpIHsKICAgICAgICBfdGhpczExLnRhc2tfYWN0aXZpdGllcyA9IGpzb25EYXRhOwoKICAgICAgICBfdGhpczExLnJlbW92ZU5vdGlmaWNhdGlvbnModGFzaywgJ25ld19tZXNzYWdlcycpOwogICAgICB9KTsKICAgIH0sCiAgICByZW1vdmVOb3RpZmljYXRpb25zOiBmdW5jdGlvbiByZW1vdmVOb3RpZmljYXRpb25zKHRhc2ssIHR5cGUpIHsKICAgICAgdmFyIF90aGlzMTIgPSB0aGlzOwoKICAgICAgdGhpcy5jdXJyZW50X3Rhc2sgPSB0YXNrOwogICAgICB2YXIgaGVhZGVycyA9IG5ldyBIZWFkZXJzKCk7CiAgICAgIGhlYWRlcnMuYXBwZW5kKCJBdXRob3JpemF0aW9uIiwgIkJlYXJlciAiICsgdGhpcy4kcm9vdC50b2tlbik7CiAgICAgIGZldGNoKHRoaXMuYXBpX3VybCArICcvZW1wbG95ZWUvdXBkYXRlX3N1Yl90YXNrcy8/dGFzaz0nICsgdGhpcy5jdXJyZW50X3Rhc2suaWQgKyAnJm5vdGlfdHlwZT0nICsgdHlwZSwgewogICAgICAgIG1ldGhvZDogJ2dldCcsCiAgICAgICAgaGVhZGVyczogaGVhZGVycwogICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7CiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGpzb25EYXRhKSB7CiAgICAgICAgaWYgKGpzb25EYXRhLnN1Y2Nlc3MpIHsKICAgICAgICAgIF90aGlzMTIuZ2V0VGFza3MoKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSwKICAgIHRhZ1N0YXR1czogZnVuY3Rpb24gdGFnU3RhdHVzKHRhc2spIHsKICAgICAgdmFyIF90aGlzMTMgPSB0aGlzOwoKICAgICAgdGhpcy5jdXJyZW50X3Rhc2sgPSB0YXNrOwogICAgICB0aGlzLnRhZ19zdGF0dXMgPSBbXTsKICAgICAgdGhpcy4kYnZNb2RhbC5zaG93KCd0YXNrLXRhZ3MnKTsKICAgICAgdmFyIGhlYWRlcnMgPSBuZXcgSGVhZGVycygpOwogICAgICBoZWFkZXJzLmFwcGVuZCgiQXV0aG9yaXphdGlvbiIsICJCZWFyZXIgIiArIHRoaXMuJHJvb3QudG9rZW4pOwogICAgICBmZXRjaCh0aGlzLmFwaV91cmwgKyAnL2VtcGxveWVlL3RhZ19zdGF0dXMvP3Rhc2s9JyArIHRoaXMuY3VycmVudF90YXNrLmlkLCB7CiAgICAgICAgbWV0aG9kOiAnZ2V0JywKICAgICAgICBoZWFkZXJzOiBoZWFkZXJzCiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTsKICAgICAgfSkudGhlbihmdW5jdGlvbiAoanNvbkRhdGEpIHsKICAgICAgICBfdGhpczEzLnRhZ19zdGF0dXMgPSBqc29uRGF0YTsKICAgICAgfSk7CiAgICB9LAogICAgc2VsZWN0VGFnOiBmdW5jdGlvbiBzZWxlY3RUYWcodGFnKSB7CiAgICAgIHZhciBfdGhpczE0ID0gdGhpczsKCiAgICAgIGlmICh0aGlzLmxvY2tfYnRuKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CgogICAgICB0aGlzLmN1cnJlbnRfdGFzay50YWcgPSB0YWc7CiAgICAgIHZhciBmb3JtZGF0YSA9IG5ldyBGb3JtRGF0YSgpOwogICAgICBmb3JtZGF0YS5hcHBlbmQoJ3Rhc2snLCB0aGlzLmN1cnJlbnRfdGFzay5pZCk7CiAgICAgIGZvcm1kYXRhLmFwcGVuZCgndGFnJywgdGFnLmlkKTsKICAgICAgZm9ybWRhdGEuYXBwZW5kKCd1c2VyJywgdGhpcy51c2VySWQpOwogICAgICB0aGlzLmxvY2tfYnRuID0gdHJ1ZTsKICAgICAgdmFyIGhlYWRlcnMgPSBuZXcgSGVhZGVycygpOwogICAgICBoZWFkZXJzLmFwcGVuZCgiQXV0aG9yaXphdGlvbiIsICJCZWFyZXIgIiArIHRoaXMuJHJvb3QudG9rZW4pOwogICAgICBmZXRjaCh0aGlzLmFwaV91cmwgKyAnL2VtcGxveWVlL3RhZ19zdGF0dXMvJywgewogICAgICAgIG1ldGhvZDogJ1BPU1QnLAogICAgICAgIGJvZHk6IGZvcm1kYXRhLAogICAgICAgIGhlYWRlcnM6IGhlYWRlcnMKICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpOwogICAgICB9KS50aGVuKGZ1bmN0aW9uIChqc29uRGF0YSkgewogICAgICAgIF90aGlzMTQubG9ja19idG4gPSBmYWxzZTsKCiAgICAgICAgaWYgKGpzb25EYXRhLmlkID4gMCkgewogICAgICAgICAgaWYgKHRhZy5tYWluX3RhZykgewogICAgICAgICAgICBfdGhpczE0LmdldFRhc2tzKCk7CgogICAgICAgICAgICBfdGhpczE0LnNob3dBbGVydCgnVGFnIFVwZGF0ZWQhJyk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBfdGhpczE0LmN1cnJlbnRfdGFzay5tYWluX3RhZyA9IHRhZy5pZDsKCiAgICAgICAgICAgIF90aGlzMTQudXBkYXRlRm9ybWRhdGEyKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgIH0sCiAgICBtZXNzYWdlRm9ybTogZnVuY3Rpb24gbWVzc2FnZUZvcm0odGFnKSB7CiAgICAgIHZhciBfdGhpczE1ID0gdGhpczsKCiAgICAgIGlmICh0aGlzLmxvY2tfYnRuKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CgogICAgICB2YXIgZm9ybWRhdGEgPSBuZXcgRm9ybURhdGEodGhpcy4kcmVmc1snbWVzc2FnZUZvcm0nXSk7CiAgICAgIGZvcm1kYXRhLmFwcGVuZCgndGFzaycsIHRoaXMuY3VycmVudF90YXNrLmlkKTsKICAgICAgZm9ybWRhdGEuYXBwZW5kKCd1c2VyJywgdGhpcy51c2VySWQpOwogICAgICB0aGlzLmxvY2tfYnRuID0gdHJ1ZTsKICAgICAgdmFyIGhlYWRlcnMgPSBuZXcgSGVhZGVycygpOwogICAgICBoZWFkZXJzLmFwcGVuZCgiQXV0aG9yaXphdGlvbiIsICJCZWFyZXIgIiArIHRoaXMuJHJvb3QudG9rZW4pOwogICAgICBmZXRjaCh0aGlzLmFwaV91cmwgKyAnL2VtcGxveWVlL3Rhc2tfYWN0aXZpdGllcy8nLCB7CiAgICAgICAgbWV0aG9kOiAnUE9TVCcsCiAgICAgICAgYm9keTogZm9ybWRhdGEsCiAgICAgICAgaGVhZGVyczogaGVhZGVycwogICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7CiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGpzb25EYXRhKSB7CiAgICAgICAgX3RoaXMxNS5sb2NrX2J0biA9IGZhbHNlOwoKICAgICAgICBpZiAoanNvbkRhdGEuaWQgPiAwKSB7CiAgICAgICAgICBfdGhpczE1Lm5ld19hY3Rpdml0eSA9IHsKICAgICAgICAgICAgbm90ZTogJycsCiAgICAgICAgICAgIHByZXZpZXdfaW1hZ2U6ICcnCiAgICAgICAgICB9OwoKICAgICAgICAgIF90aGlzMTUuZ2V0QWN0aXZpdGllcyhfdGhpczE1LmN1cnJlbnRfdGFzayk7CgogICAgICAgICAgX3RoaXMxNS5zaG93QWxlcnQoJ01lc3NhZ2Ugc2F2ZWQhJyk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0sCiAgICBhZGRTdWJUYXNrOiBmdW5jdGlvbiBhZGRTdWJUYXNrKHRhc2spIHsKICAgICAgdGhpcy5uZXdfc3ViX3Rhc2sgPSB7CiAgICAgICAgaXNfY29tcGxldGVkOiBmYWxzZSwKICAgICAgICBkdWVfZGF0ZTogdGFzay5kdWVfZGF0ZSwKICAgICAgICByZW1pZGVyX2RhdGU6IHRhc2sucmVtaWRlcl9kYXRlLAogICAgICAgIHJlcGVhdDogdGFzay5yZXBlYXQsCiAgICAgICAgcHJpb3JpdHk6IHRhc2sucHJpb3JpdHkKICAgICAgfTsKICAgICAgdGhpcy5mb2N1c0lucHV0KCdhZGRfc3ViX3Rhc2snICsgdGFzay5pZCk7CiAgICB9LAogICAgdXBkYXRlRm9ybWRhdGEyOiBmdW5jdGlvbiB1cGRhdGVGb3JtZGF0YTIoKSB7CiAgICAgIHZhciBzZWxmID0gdGhpczsKICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgc2VsZi51cGRhdGVGb3JtZGF0YSgpOwogICAgICB9LCA1MCk7CiAgICB9LAogICAgZm9jdXNJbnB1dDogZnVuY3Rpb24gZm9jdXNJbnB1dChpbnB1dF9pZCkgewogICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpbnB1dF9pZCkuZm9jdXMoKTsKICAgICAgfSwgNTApOwogICAgfQogIH0KfTs="},null]}