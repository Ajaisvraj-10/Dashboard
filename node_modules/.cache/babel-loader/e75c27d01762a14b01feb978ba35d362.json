{"remainingRequest":"/Users/muhammed/Documents/vue_projects/biowin/node_modules/thread-loader/dist/cjs.js!/Users/muhammed/Documents/vue_projects/biowin/node_modules/babel-loader/lib/index.js!/Users/muhammed/Documents/vue_projects/biowin/node_modules/vuetify-loader/lib/loader.js??ref--17-0!/Users/muhammed/Documents/vue_projects/biowin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/muhammed/Documents/vue_projects/biowin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/muhammed/Documents/vue_projects/biowin/src/views/app/oodo/production/packing-material-form.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/muhammed/Documents/vue_projects/biowin/src/views/app/oodo/production/packing-material-form.vue","mtime":1676394696000},{"path":"/Users/muhammed/Documents/vue_projects/biowin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/muhammed/Documents/vue_projects/biowin/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/muhammed/Documents/vue_projects/biowin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/muhammed/Documents/vue_projects/biowin/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Users/muhammed/Documents/vue_projects/biowin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/muhammed/Documents/vue_projects/biowin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zcGxpY2UiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5uYW1lIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLml0ZXJhdG9yIjsKLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IFByb2R1Y3RGaWVsZHMgZnJvbSAnL3NyYy92aWV3cy9hcHAvb29kby9jb21wb25lbnRzL3Byb2R1Y3RfZmllbGRzJzsKZXhwb3J0IGRlZmF1bHQgewogIG1ldGFJbmZvOiB7CiAgICB0aXRsZTogIkZQTyAtIElDUyIKICB9LAogIGNvbXBvbmVudHM6IHsKICAgIFByb2R1Y3RGaWVsZHM6IFByb2R1Y3RGaWVsZHMKICB9LAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBmb3JtX2RhdGE6IHsKICAgICAgICB3YXJlaG91c2U6IG51bGwsCiAgICAgICAgdGF4OiAwLAogICAgICAgIGNvbnZlcnNpb25fY2hhcmdlczogMCwKICAgICAgICB2YWx1ZXM6IFtdLAogICAgICAgIHRvdGFsX3F1YW50aXR5OiAwLAogICAgICAgIHRvdGFsX3ByaWNlOiAwLAogICAgICAgIHN0YXR1czogJ09yZGVyZWQnCiAgICAgIH0sCiAgICAgIGlkOiBudWxsLAogICAgICBhY3Rpb246ICdjcmVhdGUnLAogICAgICBtYXRlcmlhbHM6IFtdLAogICAgICBzcGVjaWZpY2F0aW9uczogW10sCiAgICAgIGRlcGFydG1lbnRzOiBbXSwKICAgICAgdmVuZG9yczogW10sCiAgICAgIGJ1eWVyczogW10sCiAgICAgIHNlbGVjdGVkX21hdGVyaWFsczogW10KICAgIH07CiAgfSwKICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkgewogICAgdGhpcy4kcm9vdC5jdXJyZW50X3NlY3Rpb24gPSAnaW52ZW50b3J5JzsKICAgIHRoaXMuYWN0aW9uID0gdGhpcy4kcm91dGUucGFyYW1zLmFjdGlvbjsKCiAgICBpZiAodGhpcy5hY3Rpb24gPT0gJ2VkaXQnKSB7CiAgICAgIHRoaXMuaWQgPSB0aGlzLiRyb3V0ZS5wYXJhbXMuaWQ7CiAgICAgIHRoaXMuZ2V0Rm9ybSgpOwogICAgfSBlbHNlIHsKICAgICAgaWYgKHRoaXMuJHJvdXRlLnF1ZXJ5LnNlbGVjdGVkX21hdGVyaWFscykgewogICAgICAgIHRoaXMuc2VsZWN0ZWRfbWF0ZXJpYWxzID0gdGhpcy4kcm91dGUucXVlcnkuc2VsZWN0ZWRfbWF0ZXJpYWxzOwogICAgICAgIHRoaXMuZ2V0UGFja2luZ1JlcXVlc3RzKCk7CiAgICAgIH0KICAgIH0KCiAgICB0aGlzLmdldE1hdGVyaWFscygpOwogICAgdGhpcy5nZXRTcGVjaWZpY2F0aW9ucygpOwogICAgdGhpcy5nZXREZXBhcnRtZW50cygpOwogICAgdGhpcy5nZXRWZW5kb3JzKCk7CiAgICB0aGlzLmdldEJ1eWVycygpOwogICAgdGhpcy5nZXRXYXJlaG91c2VzKCk7CiAgfSwKICBtZXRob2RzOiB7CiAgICBnZXRGb3JtOiBmdW5jdGlvbiBnZXRGb3JtKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIGhlYWRlcnMgPSBuZXcgSGVhZGVycygpOwogICAgICBoZWFkZXJzLmFwcGVuZCgiQXV0aG9yaXphdGlvbiIsICJUb2tlbiAiICsgdGhpcy4kcm9vdC50b2tlbik7CiAgICAgIGZldGNoKHRoaXMuYXBpX3VybCArICcvcHJvZHVjdC9wYWNraW5nX21hdGVyaWFsX3B1cmNoYXNlLycgKyB0aGlzLmlkICsgJy8nLCB7CiAgICAgICAgbWV0aG9kOiAnZ2V0JywKICAgICAgICBoZWFkZXJzOiBoZWFkZXJzCiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTsKICAgICAgfSkudGhlbihmdW5jdGlvbiAoanNvbkRhdGEpIHsKICAgICAgICBfdGhpcy5mb3JtX2RhdGEgPSBqc29uRGF0YTsKICAgICAgfSk7CiAgICB9LAogICAgZ2V0TWF0ZXJpYWxzOiBmdW5jdGlvbiBnZXRNYXRlcmlhbHMoKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgdmFyIGhlYWRlcnMgPSBuZXcgSGVhZGVycygpOwogICAgICBoZWFkZXJzLmFwcGVuZCgiQXV0aG9yaXphdGlvbiIsICJUb2tlbiAiICsgdGhpcy4kcm9vdC50b2tlbik7CiAgICAgIGZldGNoKHRoaXMuYXBpX3VybCArICcvcHJvZHVjdC9tYXRlcmlhbHMvJywgewogICAgICAgIG1ldGhvZDogJ2dldCcsCiAgICAgICAgaGVhZGVyczogaGVhZGVycwogICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7CiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGpzb25EYXRhKSB7CiAgICAgICAgX3RoaXMyLm1hdGVyaWFscyA9IGpzb25EYXRhOwogICAgICB9KTsKICAgIH0sCiAgICBnZXRQYWNraW5nUmVxdWVzdHM6IGZ1bmN0aW9uIGdldFBhY2tpbmdSZXF1ZXN0cygpIHsKICAgICAgdmFyIF90aGlzMyA9IHRoaXM7CgogICAgICB2YXIgaGVhZGVycyA9IG5ldyBIZWFkZXJzKCk7CiAgICAgIGhlYWRlcnMuYXBwZW5kKCJBdXRob3JpemF0aW9uIiwgIlRva2VuICIgKyB0aGlzLiRyb290LnRva2VuKTsKICAgICAgZmV0Y2godGhpcy5hcGlfdXJsICsgJy9wcm9kdWN0L2luZGVudF9wYWNraW5nX2RldGFpbHMvP2lkcz0nICsgdGhpcy5zZWxlY3RlZF9tYXRlcmlhbHMsIHsKICAgICAgICBtZXRob2Q6ICdnZXQnLAogICAgICAgIGhlYWRlcnM6IGhlYWRlcnMKICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpOwogICAgICB9KS50aGVuKGZ1bmN0aW9uIChqc29uRGF0YSkgewogICAgICAgIF90aGlzMy5mb3JtX2RhdGEudmFsdWVzID0ganNvbkRhdGE7CiAgICAgIH0pOwogICAgfSwKICAgIGdldFNwZWNpZmljYXRpb25zOiBmdW5jdGlvbiBnZXRTcGVjaWZpY2F0aW9ucygpIHsKICAgICAgdmFyIF90aGlzNCA9IHRoaXM7CgogICAgICB2YXIgaGVhZGVycyA9IG5ldyBIZWFkZXJzKCk7CiAgICAgIGhlYWRlcnMuYXBwZW5kKCJBdXRob3JpemF0aW9uIiwgIlRva2VuICIgKyB0aGlzLiRyb290LnRva2VuKTsKICAgICAgZmV0Y2godGhpcy5hcGlfdXJsICsgJy9wcm9kdWN0L3NwZWNpZmljYXRpb25zLycsIHsKICAgICAgICBtZXRob2Q6ICdnZXQnLAogICAgICAgIGhlYWRlcnM6IGhlYWRlcnMKICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpOwogICAgICB9KS50aGVuKGZ1bmN0aW9uIChqc29uRGF0YSkgewogICAgICAgIF90aGlzNC5zcGVjaWZpY2F0aW9ucyA9IGpzb25EYXRhOwogICAgICB9KTsKICAgIH0sCiAgICBnZXREZXBhcnRtZW50czogZnVuY3Rpb24gZ2V0RGVwYXJ0bWVudHMoKSB7CiAgICAgIHZhciBfdGhpczUgPSB0aGlzOwoKICAgICAgdmFyIGhlYWRlcnMgPSBuZXcgSGVhZGVycygpOwogICAgICBoZWFkZXJzLmFwcGVuZCgiQXV0aG9yaXphdGlvbiIsICJUb2tlbiAiICsgdGhpcy4kcm9vdC50b2tlbik7CiAgICAgIGZldGNoKHRoaXMuYXBpX3VybCArICcvcHJvZHVjdC9jYXRlZ29yaWVzLycsIHsKICAgICAgICBtZXRob2Q6ICdnZXQnLAogICAgICAgIGhlYWRlcnM6IGhlYWRlcnMKICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpOwogICAgICB9KS50aGVuKGZ1bmN0aW9uIChqc29uRGF0YSkgewogICAgICAgIF90aGlzNS5kZXBhcnRtZW50cyA9IGpzb25EYXRhOwogICAgICB9KTsKICAgIH0sCiAgICBnZXRWZW5kb3JzOiBmdW5jdGlvbiBnZXRWZW5kb3JzKCkgewogICAgICB2YXIgX3RoaXM2ID0gdGhpczsKCiAgICAgIHZhciBoZWFkZXJzID0gbmV3IEhlYWRlcnMoKTsKICAgICAgaGVhZGVycy5hcHBlbmQoIkF1dGhvcml6YXRpb24iLCAiVG9rZW4gIiArIHRoaXMuJHJvb3QudG9rZW4pOwogICAgICBmZXRjaCh0aGlzLmFwaV91cmwgKyAnL3Byb2R1Y3QvdmVuZG9ycy8nLCB7CiAgICAgICAgbWV0aG9kOiAnZ2V0JywKICAgICAgICBoZWFkZXJzOiBoZWFkZXJzCiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTsKICAgICAgfSkudGhlbihmdW5jdGlvbiAoanNvbkRhdGEpIHsKICAgICAgICBfdGhpczYudmVuZG9ycyA9IGpzb25EYXRhOwogICAgICB9KTsKICAgIH0sCiAgICBjcmVhdGVWZW5kb3I6IGZ1bmN0aW9uIGNyZWF0ZVZlbmRvcigpIHsKICAgICAgdmFyIF90aGlzNyA9IHRoaXM7CgogICAgICBpZiAodGhpcy5sb2NrX2J0bikgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQoKICAgICAgdGhpcy5sb2NrX2J0biA9IHRydWU7CiAgICAgIHZhciBmb3JtZGF0YSA9IG5ldyBGb3JtRGF0YSh0aGlzLiRyZWZzWydjcmVhdGVWZW5kb3InXSk7CiAgICAgIHZhciBoZWFkZXJzID0gbmV3IEhlYWRlcnMoKTsKICAgICAgaGVhZGVycy5hcHBlbmQoIkF1dGhvcml6YXRpb24iLCAiVG9rZW4gIiArIHRoaXMuJHJvb3QudG9rZW4pOwogICAgICBmZXRjaCh0aGlzLmFwaV91cmwgKyAnL3Byb2R1Y3QvdmVuZG9ycy8nLCB7CiAgICAgICAgbWV0aG9kOiAnUE9TVCcsCiAgICAgICAgYm9keTogZm9ybWRhdGEsCiAgICAgICAgaGVhZGVyczogaGVhZGVycwogICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7CiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGpzb25EYXRhKSB7CiAgICAgICAgX3RoaXM3LmxvY2tfYnRuID0gZmFsc2U7CgogICAgICAgIGlmIChqc29uRGF0YS5pZCA+IDApIHsKICAgICAgICAgIF90aGlzNy5nZXRWZW5kb3JzKCk7CgogICAgICAgICAgX3RoaXM3LmZvcm1fZGF0YS52ZW5kb3IgPSBqc29uRGF0YS5pZDsKCiAgICAgICAgICBfdGhpczcuJGJ2TW9kYWwuaGlkZSgnY3JlYXRlLXZlbmRvcicpOwoKICAgICAgICAgIF90aGlzNy5zaG93QWxlcnQoJ1NhdmVkIFN1Y2Nlc3NmdWxseSEnKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgX3RoaXM3LnNob3dBbGVydCgnU29tZXRoaW5nIFdyb25nIScpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAogICAgZ2V0QnV5ZXJzOiBmdW5jdGlvbiBnZXRCdXllcnMoKSB7CiAgICAgIHZhciBfdGhpczggPSB0aGlzOwoKICAgICAgdmFyIGhlYWRlcnMgPSBuZXcgSGVhZGVycygpOwogICAgICBoZWFkZXJzLmFwcGVuZCgiQXV0aG9yaXphdGlvbiIsICJUb2tlbiAiICsgdGhpcy4kcm9vdC50b2tlbik7CiAgICAgIGZldGNoKHRoaXMuYXBpX3VybCArICcvcHJvZHVjdC9idXllcnMvJywgewogICAgICAgIG1ldGhvZDogJ2dldCcsCiAgICAgICAgaGVhZGVyczogaGVhZGVycwogICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7CiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGpzb25EYXRhKSB7CiAgICAgICAgX3RoaXM4LmJ1eWVycyA9IGpzb25EYXRhOwogICAgICB9KTsKICAgIH0sCiAgICBjcmVhdGVCdXllcjogZnVuY3Rpb24gY3JlYXRlQnV5ZXIoKSB7CiAgICAgIHZhciBfdGhpczkgPSB0aGlzOwoKICAgICAgaWYgKHRoaXMubG9ja19idG4pIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KCiAgICAgIHRoaXMubG9ja19idG4gPSB0cnVlOwogICAgICB2YXIgZm9ybWRhdGEgPSBuZXcgRm9ybURhdGEodGhpcy4kcmVmc1snY3JlYXRlQnV5ZXInXSk7CiAgICAgIHZhciBoZWFkZXJzID0gbmV3IEhlYWRlcnMoKTsKICAgICAgaGVhZGVycy5hcHBlbmQoIkF1dGhvcml6YXRpb24iLCAiVG9rZW4gIiArIHRoaXMuJHJvb3QudG9rZW4pOwogICAgICBmZXRjaCh0aGlzLmFwaV91cmwgKyAnL3Byb2R1Y3QvYnV5ZXJzLycsIHsKICAgICAgICBtZXRob2Q6ICdQT1NUJywKICAgICAgICBib2R5OiBmb3JtZGF0YSwKICAgICAgICBoZWFkZXJzOiBoZWFkZXJzCiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTsKICAgICAgfSkudGhlbihmdW5jdGlvbiAoanNvbkRhdGEpIHsKICAgICAgICBfdGhpczkubG9ja19idG4gPSBmYWxzZTsKCiAgICAgICAgaWYgKGpzb25EYXRhLmlkID4gMCkgewogICAgICAgICAgX3RoaXM5LmdldEJ1eWVycygpOwoKICAgICAgICAgIF90aGlzOS5mb3JtX2RhdGEuYnV5ZXIgPSBqc29uRGF0YS5pZDsKCiAgICAgICAgICBfdGhpczkuJGJ2TW9kYWwuaGlkZSgnY3JlYXRlLWJ1eWVyJyk7CgogICAgICAgICAgX3RoaXM5LnNob3dBbGVydCgnU2F2ZWQgU3VjY2Vzc2Z1bGx5IScpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBfdGhpczkuc2hvd0FsZXJ0KCdTb21ldGhpbmcgV3JvbmchJyk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0sCiAgICBjcmVhdGVEYXRhOiBmdW5jdGlvbiBjcmVhdGVEYXRhKG1vZGVsKSB7CiAgICAgIGlmIChtb2RlbCA9PSAndmVuZG9yJykgewogICAgICAgIGlmICh0aGlzLmZvcm1fZGF0YS52ZW5kb3IgPT0gJ2NyZWF0ZScpIHsKICAgICAgICAgIHRoaXMuZm9ybV9kYXRhLnZlbmRvciA9ICcnOwogICAgICAgICAgdGhpcy4kYnZNb2RhbC5zaG93KCdjcmVhdGUtdmVuZG9yJyk7CiAgICAgICAgfQogICAgICB9IGVsc2UgaWYgKG1vZGVsID09ICdidXllcicpIHsKICAgICAgICBpZiAodGhpcy5mb3JtX2RhdGEuYnV5ZXIgPT0gJ2NyZWF0ZScpIHsKICAgICAgICAgIHRoaXMuZm9ybV9kYXRhLmJ1eWVyID0gJyc7CiAgICAgICAgICB0aGlzLiRidk1vZGFsLnNob3coJ2NyZWF0ZS1idXllcicpOwogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgIGxpbmVPcGVyYXRpb246IGZ1bmN0aW9uIGxpbmVPcGVyYXRpb24ob3BlcmF0aW9uKSB7CiAgICAgIGlmIChvcGVyYXRpb24gPT0gJysnKSB7CiAgICAgICAgdmFyIHNwZWNpZmljYXRpb25fdmFsdWVzID0gW107CiAgICAgICAgdGhpcy5zcGVjaWZpY2F0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uICh2YWwsIGtleSkgewogICAgICAgICAgaWYgKHZhbC5zcGVjaWZpY2F0aW9uX2ZvciA9PSAnUGFja2luZyBNYXRlcmlhbCcpIHsKICAgICAgICAgICAgc3BlY2lmaWNhdGlvbl92YWx1ZXMucHVzaCh7CiAgICAgICAgICAgICAgaWQ6IHZhbC5pZCwKICAgICAgICAgICAgICBuYW1lOiB2YWwubmFtZSwKICAgICAgICAgICAgICB2YWx1ZTogJycsCiAgICAgICAgICAgICAgaXNfdmFsdWVzOiB2YWwuaXNfdmFsdWVzLAogICAgICAgICAgICAgIHZhbHVlczogdmFsLnZhbHVlcywKICAgICAgICAgICAgICBtYXRlcmlhbF9pZHM6IHZhbC5tYXRlcmlhbF9pZHMKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgdGhpcy5mb3JtX2RhdGEudmFsdWVzLnB1c2goewogICAgICAgICAgbWF0ZXJpYWw6IHRoaXMubWF0ZXJpYWxzWzBdLmlkLAogICAgICAgICAgcmVxdWVzdGVkX3F1YW50aXR5OiAwLAogICAgICAgICAgcHJpY2U6IDAsCiAgICAgICAgICBtYXhfcXVhbnRpdHk6IDAsCiAgICAgICAgICBzcGVjaWZpY2F0aW9uczogc3BlY2lmaWNhdGlvbl92YWx1ZXMsCiAgICAgICAgICBtYXRlcmlhbF9kZXRhaWw6IHRoaXMubWF0ZXJpYWxzWzBdCiAgICAgICAgfSk7IC8vIHRoaXMudG90YWxfa2V5cysrCiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5mb3JtX2RhdGEudmFsdWVzLnNwbGljZShvcGVyYXRpb24sIDEpOyAvLyB0aGlzLnRvdGFsX2tleXMtLQogICAgICB9CgogICAgICB0aGlzLmNhbGN1bHRpb24oKTsKICAgIH0sCiAgICBjYWxjdWx0aW9uOiBmdW5jdGlvbiBjYWxjdWx0aW9uKCkgewogICAgICB2YXIgcXVhbnRpdHkgPSAwOwogICAgICB2YXIgcHJpY2UgPSAwOwogICAgICB0aGlzLmZvcm1fZGF0YS52YWx1ZXMuZm9yRWFjaChmdW5jdGlvbiAodmFsLCBrZXkpIHsKICAgICAgICBxdWFudGl0eSA9IHF1YW50aXR5ICsgcGFyc2VGbG9hdCh2YWwucmVxdWVzdGVkX3F1YW50aXR5KTsKICAgICAgICBwcmljZSA9IHByaWNlICsgcGFyc2VGbG9hdCh2YWwucHJpY2UpICogcGFyc2VGbG9hdCh2YWwucmVxdWVzdGVkX3F1YW50aXR5KTsKICAgICAgfSk7CiAgICAgIHRoaXMuZm9ybV9kYXRhLnRvdGFsX3F1YW50aXR5ID0gcXVhbnRpdHk7CiAgICAgIHRoaXMuZm9ybV9kYXRhLnRvdGFsX3ByaWNlID0gcHJpY2U7CiAgICB9LAogICAgY3JlYXRlTWF0ZXJpYWxzRm9ybWRhdGE6IGZ1bmN0aW9uIGNyZWF0ZU1hdGVyaWFsc0Zvcm1kYXRhKCkgewogICAgICB2YXIgX3RoaXMxMCA9IHRoaXM7CgogICAgICBpZiAodGhpcy5sb2NrX2J0bikgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQoKICAgICAgdGhpcy5sb2NrX2J0biA9IHRydWU7CiAgICAgIHZhciBmb3JtZGF0YSA9IG5ldyBGb3JtRGF0YSh0aGlzLiRyZWZzWydkYXRhRm9ybSddKTsKICAgICAgZm9ybWRhdGEuYXBwZW5kKCdwYWNraW5nX21hdGVyaWFsJywgdGhpcy5pZCk7CiAgICAgIHZhciBoZWFkZXJzID0gbmV3IEhlYWRlcnMoKTsKICAgICAgaGVhZGVycy5hcHBlbmQoIkF1dGhvcml6YXRpb24iLCAiVG9rZW4gIiArIHRoaXMuJHJvb3QudG9rZW4pOwogICAgICBmZXRjaCh0aGlzLmFwaV91cmwgKyAnL3Byb2R1Y3QvcGFja2luZ19tYXRlcmlhbF9wdXJjaGFzZV9tYXRlcmlhbHMvJywgewogICAgICAgIG1ldGhvZDogJ1BPU1QnLAogICAgICAgIGJvZHk6IGZvcm1kYXRhLAogICAgICAgIGhlYWRlcnM6IGhlYWRlcnMKICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpOwogICAgICB9KS50aGVuKGZ1bmN0aW9uIChqc29uRGF0YSkgewogICAgICAgIF90aGlzMTAubG9ja19idG4gPSBmYWxzZTsKCiAgICAgICAgaWYgKGpzb25EYXRhLnN1Y2Nlc3MpIHsKICAgICAgICAgIC8vIHRoaXMuaW5kZW50UGFja2luZ0RldGFpbHMoKQogICAgICAgICAgX3RoaXMxMC5zaG93QWxlcnQoJ1NhdmVkIFN1Y2Nlc3NmdWxseSEnKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgX3RoaXMxMC5zaG93QWxlcnQoJ1NvbWV0aGluZyBXcm9uZyEnKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSwKICAgIGRhdGFGb3JtOiBmdW5jdGlvbiBkYXRhRm9ybSgpIHsKICAgICAgaWYgKHRoaXMuYWN0aW9uID09ICdjcmVhdGUnKSB7CiAgICAgICAgdGhpcy5jcmVhdGVGb3JtZGF0YSgpOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMudXBkYXRlRm9ybWRhdGEoKTsKICAgICAgfQogICAgfSwKICAgIGNyZWF0ZUZvcm1kYXRhOiBmdW5jdGlvbiBjcmVhdGVGb3JtZGF0YSgpIHsKICAgICAgdmFyIF90aGlzMTEgPSB0aGlzOwoKICAgICAgaWYgKHRoaXMubG9ja19idG4pIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KCiAgICAgIHRoaXMubG9ja19idG4gPSB0cnVlOwogICAgICB2YXIgZm9ybWRhdGEgPSBuZXcgRm9ybURhdGEodGhpcy4kcmVmc1snZGF0YUZvcm0nXSk7CiAgICAgIGZvcm1kYXRhLmFwcGVuZCgnd2FyZWhvdXNlJywgdGhpcy5mb3JtX2RhdGEud2FyZWhvdXNlKTsKICAgICAgdmFyIGhlYWRlcnMgPSBuZXcgSGVhZGVycygpOwogICAgICBoZWFkZXJzLmFwcGVuZCgiQXV0aG9yaXphdGlvbiIsICJUb2tlbiAiICsgdGhpcy4kcm9vdC50b2tlbik7CiAgICAgIGZldGNoKHRoaXMuYXBpX3VybCArICcvcHJvZHVjdC9wYWNraW5nX21hdGVyaWFsX3B1cmNoYXNlLycsIHsKICAgICAgICBtZXRob2Q6ICdQT1NUJywKICAgICAgICBib2R5OiBmb3JtZGF0YSwKICAgICAgICBoZWFkZXJzOiBoZWFkZXJzCiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTsKICAgICAgfSkudGhlbihmdW5jdGlvbiAoanNvbkRhdGEpIHsKICAgICAgICBfdGhpczExLmxvY2tfYnRuID0gZmFsc2U7CgogICAgICAgIGlmIChqc29uRGF0YS5pZCA+IDApIHsKICAgICAgICAgIC8vIHRoaXMuZm9ybV9kYXRhID0ganNvbkRhdGEKICAgICAgICAgIF90aGlzMTEuaWQgPSBqc29uRGF0YS5pZDsKCiAgICAgICAgICBfdGhpczExLmNyZWF0ZU1hdGVyaWFsc0Zvcm1kYXRhKCk7CgogICAgICAgICAgX3RoaXMxMS5zaG93QWxlcnQoJ1NhdmVkIFN1Y2Nlc3NmdWxseSEnKTsKCiAgICAgICAgICBfdGhpczExLmdldEJhY2soKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgX3RoaXMxMS5zaG93QWxlcnQoJ1NvbWV0aGluZyBXcm9uZyEnKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSwKICAgIHVwZGF0ZUZvcm1kYXRhOiBmdW5jdGlvbiB1cGRhdGVGb3JtZGF0YSgpIHsKICAgICAgdmFyIF90aGlzMTIgPSB0aGlzOwoKICAgICAgaWYgKHRoaXMubG9ja19idG4pIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KCiAgICAgIHRoaXMubG9ja19idG4gPSB0cnVlOwogICAgICB2YXIgZm9ybWRhdGEgPSBuZXcgRm9ybURhdGEodGhpcy4kcmVmc1snZGF0YUZvcm0nXSk7CiAgICAgIGZvcm1kYXRhLmFwcGVuZCgnd2FyZWhvdXNlJywgdGhpcy5mb3JtX2RhdGEud2FyZWhvdXNlKTsKICAgICAgdmFyIGhlYWRlcnMgPSBuZXcgSGVhZGVycygpOwogICAgICBoZWFkZXJzLmFwcGVuZCgiQXV0aG9yaXphdGlvbiIsICJUb2tlbiAiICsgdGhpcy4kcm9vdC50b2tlbik7CiAgICAgIGZldGNoKHRoaXMuYXBpX3VybCArICcvcHJvZHVjdC9wYWNraW5nX21hdGVyaWFsX3B1cmNoYXNlLycgKyB0aGlzLmlkICsgJy8nLCB7CiAgICAgICAgbWV0aG9kOiAnUFVUJywKICAgICAgICBib2R5OiBmb3JtZGF0YSwKICAgICAgICBoZWFkZXJzOiBoZWFkZXJzCiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTsKICAgICAgfSkudGhlbihmdW5jdGlvbiAoanNvbkRhdGEpIHsKICAgICAgICBfdGhpczEyLmxvY2tfYnRuID0gZmFsc2U7CgogICAgICAgIGlmIChqc29uRGF0YS5pZCA+IDApIHsKICAgICAgICAgIF90aGlzMTIuY3JlYXRlTWF0ZXJpYWxzRm9ybWRhdGEoKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgX3RoaXMxMi5zaG93QWxlcnQoJ1NvbWV0aGluZyBXcm9uZyEnKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH0KfTs="},null]}